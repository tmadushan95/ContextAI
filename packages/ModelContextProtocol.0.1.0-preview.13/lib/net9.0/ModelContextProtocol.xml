<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModelContextProtocol</name>
    </assembly>
    <members>
        <member name="T:ModelContextProtocol.AIContentExtensions">
            <summary>
            Provides extension methods for converting between Model Context Protocol (MCP) types and Microsoft.Extensions.AI types.
            </summary>
            <remarks>
            This class serves as an adapter layer between Model Context Protocol (MCP) types and the <see cref="T:Microsoft.Extensions.AI.AIContent"/> model types
            from the Microsoft.Extensions.AI namespace.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToChatMessage(ModelContextProtocol.Protocol.Types.PromptMessage)">
            <summary>
            Converts a <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> to a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> object.
            </summary>
            <param name="promptMessage">The prompt message to convert.</param>
            <returns>A <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> object created from the prompt message.</returns>
            <remarks>
            This method transforms a protocol-specific <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> from the Model Context Protocol
            into a standard <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> object that can be used with AI client libraries.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToChatMessages(ModelContextProtocol.Protocol.Types.GetPromptResult)">
            <summary>
            Converts a <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> to a list of <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects.
            </summary>
            <param name="promptResult">The prompt result containing messages to convert.</param>
            <returns>A list of <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects created from the prompt messages.</returns>
            <remarks>
            This method transforms protocol-specific <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects from a Model Context Protocol
            prompt result into standard <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects that can be used with AI client libraries.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)">
            <summary>
            Converts a <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> to a list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects.
            </summary>
            <param name="chatMessage">The chat message to convert.</param>
            <returns>A list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects created from the chat message's contents.</returns>
            <remarks>
            This method transforms standard <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects used with AI client libraries into
            protocol-specific <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects for the Model Context Protocol system.
            Only representable content items are processed.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.Content)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.AIContent"/> from the content of a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/>.</summary>
            <param name="content">The <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/>.</returns>
            <remarks>
            This method converts Model Context Protocol content types to the equivalent Microsoft.Extensions.AI 
            content types, enabling seamless integration between the protocol and AI client libraries.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.ResourceContents)">
            <summary>Creates a new <see cref="T:Microsoft.Extensions.AI.AIContent"/> from the content of a <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</summary>
            <param name="content">The <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/>.</returns>
            <remarks>
            This method converts Model Context Protocol resource types to the equivalent Microsoft.Extensions.AI 
            content types, enabling seamless integration between the protocol and AI client libraries.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContents(System.Collections.Generic.IEnumerable{ModelContextProtocol.Protocol.Types.Content})">
            <summary>Creates a list of <see cref="T:Microsoft.Extensions.AI.AIContent"/> from a sequence of <see cref="T:ModelContextProtocol.Protocol.Types.Content"/>.</summary>
            <param name="contents">The <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> instances to convert.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIContent"/> instances.</returns>
            <remarks>
            <para>
            This method converts a collection of Model Context Protocol content objects into a collection of
            Microsoft.Extensions.AI content objects. It's useful when working with multiple content items, such as
            when processing the contents of a message or response.
            </para>
            <para>
            Each <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object is converted using <see cref="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.Content)"/>,
            preserving the type-specific conversion logic for text, images, audio, and resources.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.ToAIContents(System.Collections.Generic.IEnumerable{ModelContextProtocol.Protocol.Types.ResourceContents})">
            <summary>Creates a list of <see cref="T:Microsoft.Extensions.AI.AIContent"/> from a sequence of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</summary>
            <param name="contents">The <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> instances to convert.</param>
            <returns>A list of <see cref="T:Microsoft.Extensions.AI.AIContent"/> objects created from the resource contents.</returns>
            <remarks>
            <para>
            This method converts a collection of Model Context Protocol resource objects into a collection of
            Microsoft.Extensions.AI content objects. It's useful when working with multiple resources, such as
            when processing the contents of a <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/>.
            </para>
            <para>
            Each <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> object is converted using <see cref="M:ModelContextProtocol.AIContentExtensions.ToAIContent(ModelContextProtocol.Protocol.Types.ResourceContents)"/>,
            preserving the type-specific conversion logic: text resources become <see cref="T:Microsoft.Extensions.AI.TextContent"/> objects and
            binary resources become <see cref="T:Microsoft.Extensions.AI.DataContent"/> objects.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.AIContentExtensions.GetBase64Data(Microsoft.Extensions.AI.DataContent)">
            <summary>Extracts the data from a <see cref="T:Microsoft.Extensions.AI.DataContent"/> as a Base64 string.</summary>
        </member>
        <member name="T:ModelContextProtocol.Client.IMcpClient">
            <summary>
            Represents an instance of a Model Context Protocol (MCP) client that connects to and communicates with an MCP server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerCapabilities">
            <summary>
            Gets the capabilities supported by the connected server.
            </summary>
            <exception cref="T:System.InvalidOperationException">The client is not connected.</exception>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerInfo">
            <summary>
            Gets the implementation information of the connected server.
            </summary>
            <remarks>
            <para>
            This property provides identification details about the connected server, including its name and version.
            It is populated during the initialization handshake and is available after a successful connection.
            </para>
            <para>
            This information can be useful for logging, debugging, compatibility checks, and displaying server
            information to users.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The client is not connected.</exception>
        </member>
        <member name="P:ModelContextProtocol.Client.IMcpClient.ServerInstructions">
            <summary>
            Gets any instructions describing how to use the connected server and its features.
            </summary>
            <remarks>
            <para>
            This property contains instructions provided by the server during initialization that explain
            how to effectively use its capabilities. These instructions can include details about available
            tools, expected input formats, limitations, or any other helpful information.
            </para>
            <para>
            This can be used by clients to improve an LLM's understanding of available tools, prompts, and resources. 
            It can be thought of like a "hint" to the model and may be added to a system prompt.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClient">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClient.#ctor(ModelContextProtocol.Protocol.Transport.IClientTransport,ModelContextProtocol.Client.McpClientOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Client.McpClient"/> class.
            </summary>
            <param name="clientTransport">The transport to use for communication with the server.</param>
            <param name="options">Options for the client, defining protocol version and capabilities.</param>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerCapabilities">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerInfo">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.ServerInstructions">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClient.EndpointName">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClient.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously connects to an MCP server, establishes the transport connection, and completes the initialization handshake.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClient.DisposeUnsynchronizedAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClient.__LogServerCapabilitiesReceivedStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientExtensions">
            <summary>
            Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>.
            </summary>
            <remarks>
            <para>
            This class contains extension methods that simplify common operations with an MCP client,
            such as pinging a server, listing and working with tools, prompts, and resources, and
            managing subscriptions to resources.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.PingAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Sends a ping request to verify server connectivity.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that completes when the ping is successful.</returns>
            <remarks>
            <para>
            This method is used to check if the MCP server is online and responding to requests.
            It can be useful for health checking, ensuring the connection is established, or verifying 
            that the client has proper authorization to communicate with the server.
            </para>
            <para>
            The ping operation is lightweight and does not require any parameters. A successful completion
            of the task indicates that the server is operational and accessible.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:ModelContextProtocol.McpException">Thrown when the server cannot be reached or returns an error response.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available tools from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="serializerOptions">The serializer options governing tool parameter serialization. If null, the default options will be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A list of all available tools as <see cref="T:ModelContextProtocol.Client.McpClientTool"/> instances.</returns>
            <remarks>
            <para>
            This method fetches all available tools from the MCP server and returns them as a complete list.
            It automatically handles pagination with cursors if the server responds with only a portion per request.
            </para>
            <para>
            For servers with a large number of tools and that responds with paginated responses, consider using 
            <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/> instead, as it streams tools as they arrive rather than loading them all at once.
            </para>
            <para>
            The serializer options provided are flowed to each <see cref="T:ModelContextProtocol.Client.McpClientTool"/> and will be used
            when invoking tools in order to serialize any parameters.
            </para>
            </remarks>
            <example>
            <code>
            // Get all tools available on the server
            var tools = await mcpClient.ListToolsAsync();
            
            // Use tools with an AI client
            ChatOptions chatOptions = new()
            {
                Tools = [.. tools]
            };
            
            await foreach (var update in chatClient.GetStreamingResponseAsync(userMessage, chatOptions))
            {
                Console.Write(update);
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available tools from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="serializerOptions">The serializer options governing tool parameter serialization. If null, the default options will be used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous sequence of all available tools as <see cref="T:ModelContextProtocol.Client.McpClientTool"/> instances.</returns>
            <remarks>
            <para>
            This method uses asynchronous enumeration to retrieve tools from the server, which allows processing tools
            as they arrive rather than waiting for all tools to be retrieved. The method automatically handles pagination
            with cursors if the server responds with tools split across multiple responses.
            </para>
            <para>
            The serializer options provided are flowed to each <see cref="T:ModelContextProtocol.Client.McpClientTool"/> and will be used
            when invoking tools in order to serialize any parameters.
            </para>
            <para>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in re-querying the server and yielding the sequence of available tools.
            </para>
            </remarks>
            <example>
            <code>
            // Enumerate all tools available on the server
            await foreach (var tool in client.EnumerateToolsAsync())
            {
                Console.WriteLine($"Tool: {tool.Name}");
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListPromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available prompts from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A list of all available prompts as <see cref="T:ModelContextProtocol.Client.McpClientPrompt"/> instances.</returns>
            <remarks>
            <para>
            This method fetches all available prompts from the MCP server and returns them as a complete list.
            It automatically handles pagination with cursors if the server responds with only a portion per request.
            </para>
            <para>
            For servers with a large number of prompts and that responds with paginated responses, consider using 
            <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumeratePromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/> instead, as it streams prompts as they arrive rather than loading them all at once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumeratePromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available prompts from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous sequence of all available prompts as <see cref="T:ModelContextProtocol.Client.McpClientPrompt"/> instances.</returns>
            <remarks>
            <para>
            This method uses asynchronous enumeration to retrieve prompts from the server, which allows processing prompts
            as they arrive rather than waiting for all prompts to be retrieved. The method automatically handles pagination
            with cursors if the server responds with prompts split across multiple responses.
            </para>
            <para>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in re-querying the server and yielding the sequence of available prompts.
            </para>
            </remarks>
            <example>
            <code>
            // Enumerate all prompts available on the server
            await foreach (var prompt in client.EnumeratePromptsAsync())
            {
                Console.WriteLine($"Prompt: {prompt.Name}");
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.GetPromptAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Retrieves a specific prompt from the MCP server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="name">The name of the prompt to retrieve.</param>
            <param name="arguments">Optional arguments for the prompt. Keys are parameter names, and values are the argument values.</param>
            <param name="serializerOptions">The serialization options governing argument serialization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task containing the prompt's result with content and messages.</returns>
            <remarks>
            <para>
            This method sends a request to the MCP server to create the specified prompt with the provided arguments.
            The server will process the arguments and return a prompt containing messages or other content.
            </para>
            <para>
            Arguments are serialized into JSON and passed to the server, where they may be used to customize the 
            prompt's behavior or content. Each prompt may have different argument requirements.
            </para>
            <para>
            The returned <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> contains a collection of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects,
            which can be converted to <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects using the <see cref="M:ModelContextProtocol.AIContentExtensions.ToChatMessages(ModelContextProtocol.Protocol.Types.GetPromptResult)"/> method.
            </para>
            </remarks>
            <exception cref="T:ModelContextProtocol.McpException">Thrown when the prompt does not exist, when required arguments are missing, or when the server encounters an error processing the prompt.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available resource templates from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A list of all available resource templates as <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> instances.</returns>
            <remarks>
            <para>
            This method fetches all available resource templates from the MCP server and returns them as a complete list.
            It automatically handles pagination with cursors if the server responds with only a portion per request.
            </para>
            <para>
            For servers with a large number of resource templates and that responds with paginated responses, consider using 
            <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/> instead, as it streams templates as they arrive rather than loading them all at once.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available resource templates from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous sequence of all available resource templates as <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> instances.</returns>
            <remarks>
            <para>
            This method uses asynchronous enumeration to retrieve resource templates from the server, which allows processing templates
            as they arrive rather than waiting for all templates to be retrieved. The method automatically handles pagination
            with cursors if the server responds with templates split across multiple responses.
            </para>
            <para>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in re-querying the server and yielding the sequence of available resource templates.
            </para>
            </remarks>
            <example>
            <code>
            // Enumerate all resource templates available on the server
            await foreach (var template in client.EnumerateResourceTemplatesAsync())
            {
                Console.WriteLine($"Template: {template.Name}");
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ListResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Retrieves a list of available resources from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A list of all available resources as <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> instances.</returns>
            <remarks>
            <para>
            This method fetches all available resources from the MCP server and returns them as a complete list.
            It automatically handles pagination with cursors if the server responds with only a portion per request.
            </para>
            <para>
            For servers with a large number of resources and that responds with paginated responses, consider using 
            <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/> instead, as it streams resources as they arrive rather than loading them all at once.
            </para>
            </remarks>
            <example>
            <code>
            // Get all resources available on the server
            var resources = await client.ListResourcesAsync();
            
            // Display information about each resource
            foreach (var resource in resources)
            {
                Console.WriteLine($"Resource URI: {resource.Uri}");
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)">
            <summary>
            Creates an enumerable for asynchronously enumerating all available resources from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An asynchronous sequence of all available resources as <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> instances.</returns>
            <remarks>
            <para>
            This method uses asynchronous enumeration to retrieve resources from the server, which allows processing resources
            as they arrive rather than waiting for all resources to be retrieved. The method automatically handles pagination
            with cursors if the server responds with resources split across multiple responses.
            </para>
            <para>
            Every iteration through the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            will result in re-querying the server and yielding the sequence of available resources.
            </para>
            </remarks>
            <example>
            <code>
            // Enumerate all resources available on the server
            await foreach (var resource in client.EnumerateResourcesAsync())
            {
                Console.WriteLine($"Resource URI: {resource.Uri}");
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ReadResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Reads a resource from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ReadResourceAsync(ModelContextProtocol.Client.IMcpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Reads a resource from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The uri of the resource.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ReadResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Reads a resource from the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uriTemplate">The uri template of the resource.</param>
            <param name="arguments">Arguments to use to format <paramref name="uriTemplate"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uriTemplate"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uriTemplate"/> is empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.CompleteAsync(ModelContextProtocol.Client.IMcpClient,ModelContextProtocol.Protocol.Types.Reference,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Requests completion suggestions for a prompt argument or resource reference.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="reference">The reference object specifying the type and optional URI or name.</param>
            <param name="argumentName">The name of the argument for which completions are requested.</param>
            <param name="argumentValue">The current value of the argument, used to filter relevant completions.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:ModelContextProtocol.Protocol.Types.CompleteResult"/> containing completion suggestions.</returns>
            <remarks>
            <para>
            This method allows clients to request auto-completion suggestions for arguments in a prompt template
            or for resource references.
            </para>
            <para>
            When working with prompt references, the server will return suggestions for the specified argument
            that match or begin with the current argument value. This is useful for implementing intelligent
            auto-completion in user interfaces.
            </para>
            <para>
            When working with resource references, the server will return suggestions relevant to the specified 
            resource URI.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="reference"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="argumentName"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="argumentName"/> is empty or composed entirely of whitespace.</exception>
            <exception cref="T:ModelContextProtocol.McpException">The server returned an error response.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SubscribeToResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Subscribes to a resource on the server to receive notifications when it changes.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The URI of the resource to which to subscribe.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            <para>
            This method allows the client to register interest in a specific resource identified by its URI.
            When the resource changes, the server will send notifications to the client, enabling real-time
            updates without polling.
            </para>
            <para>
            The subscription remains active until explicitly unsubscribed using <see cref="M:UnsubscribeFromResourceAsync"/>
            or until the client disconnects from the server.
            </para>
            <para>
            To handle resource change notifications, register an event handler for the appropriate notification events,
            such as with <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SubscribeToResourceAsync(ModelContextProtocol.Client.IMcpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Subscribes to a resource on the server to receive notifications when it changes.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The URI of the resource to which to subscribe.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            <para>
            This method allows the client to register interest in a specific resource identified by its URI.
            When the resource changes, the server will send notifications to the client, enabling real-time
            updates without polling.
            </para>
            <para>
            The subscription remains active until explicitly unsubscribed using <see cref="M:UnsubscribeFromResourceAsync"/>
            or until the client disconnects from the server.
            </para>
            <para>
            To handle resource change notifications, register an event handler for the appropriate notification events,
            such as with <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.UnsubscribeFromResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Unsubscribes from a resource on the server to stop receiving notifications about its changes.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The URI of the resource to unsubscribe from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            <para>
            This method cancels a previous subscription to a resource, stopping the client from receiving
            notifications when that resource changes.
            </para>
            <para>
            The unsubscribe operation is idempotent, meaning it can be called multiple times for the same
            resource without causing errors, even if there is no active subscription.
            </para>
            <para>
            Due to the nature of the MCP protocol, it is possible the client may receive notifications after
            unsubscribing if those notifications were issued by the server prior to the unsubscribe request being received.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="uri"/> is empty or composed entirely of whitespace.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.UnsubscribeFromResourceAsync(ModelContextProtocol.Client.IMcpClient,System.Uri,System.Threading.CancellationToken)">
            <summary>
            Unsubscribes from a resource on the server to stop receiving notifications about its changes.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="uri">The URI of the resource to unsubscribe from.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <remarks>
            <para>
            This method cancels a previous subscription to a resource, stopping the client from receiving
            notifications when that resource changes.
            </para>
            <para>
            The unsubscribe operation is idempotent, meaning it can be called multiple times for the same
            resource without causing errors, even if there is no active subscription.
            </para>
            <para>
            Due to the nature of the MCP protocol, it is possible the client may receive notifications after
            unsubscribing if those notifications were issued by the server prior to the unsubscribe request being received.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="uri"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.CallToolAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IProgress{ModelContextProtocol.ProgressNotificationValue},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Invokes a tool on the server.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="toolName">The name of the tool to call on the server..</param>
            <param name="arguments">An optional dictionary of arguments to pass to the tool. Each key represents a parameter name,
            and its associated value represents the argument value.
            </param>
            <param name="progress">
            An optional <see cref="T:System.IProgress`1"/> to have progress notifications reported to it. Setting this to a non-<see langword="null"/>
            value will result in a progress token being included in the call, and any resulting progress notifications during the operation
            routed to this instance.
            </param>
            <param name="serializerOptions">
            The JSON serialization options governing argument serialization. If <see langword="null"/>, the default serialization options will be used.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A task containing the <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> from the tool execution. The response includes
            the tool's output content, which may be structured data, text, or an error message.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="toolName"/> is <see langword="null"/>.</exception>
            <exception cref="T:ModelContextProtocol.McpException">The server could not find the requested tool, or the server encountered an error while processing the request.</exception>
            <example>
            <code>
            // Call a simple echo tool with a string argument
            var result = await client.CallToolAsync(
                "echo",
                new Dictionary&lt;string, object?&gt;
                {
                    ["message"] = "Hello MCP!"
                });
            </code>
            </example>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ToChatClientArguments(ModelContextProtocol.Protocol.Types.CreateMessageRequestParams)">
            <summary>
            Converts the contents of a <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams"/> into a pair of
            <see cref="T:System.Collections.Generic.IEnumerable`1"/> and <see cref="T:Microsoft.Extensions.AI.ChatOptions"/> instances to use
            as inputs into a <see cref="T:Microsoft.Extensions.AI.IChatClient"/> operation.
            </summary>
            <param name="requestParams"></param>
            <returns>The created pair of messages and options.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="requestParams"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ToCreateMessageResult(Microsoft.Extensions.AI.ChatResponse)">
            <summary>Converts the contents of a <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> into a <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageResult"/>.</summary>
            <param name="chatResponse">The <see cref="T:Microsoft.Extensions.AI.ChatResponse"/> whose contents should be extracted.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="chatResponse"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.CreateSamplingHandler(Microsoft.Extensions.AI.IChatClient)">
            <summary>
            Creates a sampling handler for use with <see cref="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler"/> that will
            satisfy sampling requests using the specified <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.
            </summary>
            <param name="chatClient">The <see cref="T:Microsoft.Extensions.AI.IChatClient"/> with which to satisfy sampling requests.</param>
            <returns>The created handler delegate that can be assigned to <see cref="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler"/>.</returns>
            <remarks>
            <para>
            This method creates a function that converts MCP message requests into chat client calls, enabling
            an MCP client to generate text or other content using an actual AI model via the provided chat client.
            </para>
            <para>
            The handler can process text messages, image messages, and resource messages as defined in the
            Model Context Protocol.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="chatClient"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SetLoggingLevel(ModelContextProtocol.Client.IMcpClient,ModelContextProtocol.Protocol.Types.LoggingLevel,System.Threading.CancellationToken)">
            <summary>
            Sets the logging level for the server to control which log messages are sent to the client.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="level">The minimum severity level of log messages to receive from the server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            <para>
            After this request is processed, the server will send log messages at or above the specified
            logging level as notifications to the client. For example, if <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Warning"/> is set,
            the client will receive <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Warning"/>, <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Error"/>, 
            <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Critical"/>, <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Alert"/>, and <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Emergency"/>
            level messages.
            </para>
            <para>
            To receive all log messages, set the level to <see cref="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Debug"/>.
            </para>
            <para>
            Log messages are delivered as notifications to the client and can be captured by registering
            appropriate event handlers with the client implementation, such as with <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.SetLoggingLevel(ModelContextProtocol.Client.IMcpClient,Microsoft.Extensions.Logging.LogLevel,System.Threading.CancellationToken)">
            <summary>
            Sets the logging level for the server to control which log messages are sent to the client.
            </summary>
            <param name="client">The client instance used to communicate with the MCP server.</param>
            <param name="level">The minimum severity level of log messages to receive from the server.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            <para>
            After this request is processed, the server will send log messages at or above the specified
            logging level as notifications to the client. For example, if <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/> is set,
            the client will receive <see cref="F:Microsoft.Extensions.Logging.LogLevel.Warning"/>, <see cref="F:Microsoft.Extensions.Logging.LogLevel.Error"/>, 
            and <see cref="F:Microsoft.Extensions.Logging.LogLevel.Critical"/> level messages.
            </para>
            <para>
            To receive all log messages, set the level to <see cref="F:Microsoft.Extensions.Logging.LogLevel.Trace"/>.
            </para>
            <para>
            Log messages are delivered as notifications to the client and can be captured by registering
            appropriate event handlers with the client implementation, such as with <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/>.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="client"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientExtensions.ToArgumentsDictionary(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions)">
            <summary>Convers a dictionary with <see cref="T:System.Object"/> values to a dictionary with <see cref="T:System.Text.Json.JsonElement"/> values.</summary>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientFactory">
            <summary>
            Provides factory methods for creating Model Context Protocol (MCP) clients.
            </summary>
            <remarks>
            This factory class is the primary way to instantiate <see cref="T:ModelContextProtocol.Client.IMcpClient"/> instances
            that connect to MCP servers. It handles the creation and connection
            of appropriate implementations through the supplied transport.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientFactory.CreateAsync(ModelContextProtocol.Protocol.Transport.IClientTransport,ModelContextProtocol.Client.McpClientOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.Threading.CancellationToken)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>, connecting it to the specified server.</summary>
            <param name="clientTransport">The transport instance used to communicate with the server.</param>
            <param name="clientOptions">
            A client configuration object which specifies client capabilities and protocol version.
            If <see langword="null"/>, details based on the current process will be employed.
            </param>
            <param name="loggerFactory">A logger factory for creating loggers for clients.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>An <see cref="T:ModelContextProtocol.Client.IMcpClient"/> that's connected to the specified server.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientTransport"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="clientOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientOptions">
            <summary>
            Provides configuration options for creating <see cref="T:ModelContextProtocol.Client.IMcpClient"/> instances.
            </summary>
            <remarks>
            These options are typically passed to <see cref="M:ModelContextProtocol.Client.McpClientFactory.CreateAsync(ModelContextProtocol.Protocol.Transport.IClientTransport,ModelContextProtocol.Client.McpClientOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.Threading.CancellationToken)"/> when creating a client.
            They define client capabilities, protocol version, and other client-specific settings.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.ClientInfo">
            <summary>
            Gets or sets information about this client implementation, including its name and version.
            </summary>
            <remarks>
            <para>
            This information is sent to the server during initialization to identify the client.
            It's often displayed in server logs and can be used for debugging and compatibility checks.
            </para>
            <para>
            When not specified, information sourced from the current process will be used.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.Capabilities">
            <summary>
            Gets or sets the client capabilities to advertise to the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.ProtocolVersion">
            <summary>
            Gets or sets the protocol version to request from the server, using a date-based versioning scheme.
            </summary>
            <remarks>
            The protocol version is a key part of the initialization handshake. The client and server must 
            agree on a compatible protocol version to communicate successfully. If the server doesn't support
            the requested version, it will respond with a version mismatch error.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientOptions.InitializationTimeout">
            <summary>
            Gets or sets a timeout for the client-server initialization handshake sequence.
            </summary>
            <remarks>
            <para>
            This timeout determines how long the client will wait for the server to respond during
            the initialization protocol handshake. If the server doesn't respond within this timeframe,
            an exception will be thrown.
            </para>
            <para>
            Setting an appropriate timeout prevents the client from hanging indefinitely when
            connecting to unresponsive servers.
            </para>
            <para>The default value is 60 seconds.</para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientPrompt">
            <summary>
            Represents a named prompt that can be retrieved from an MCP server and invoked with arguments.
            </summary>
            <remarks>
            <para>
            This class provides a client-side wrapper around a prompt defined on an MCP server. It allows
            retrieving the prompt's content by sending a request to the server with optional arguments.
            Instances of this class are typically obtained by calling <see cref="M:ModelContextProtocol.Client.McpClientExtensions.ListPromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>
            or <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumeratePromptsAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>.
            </para>
            <para>
            Each prompt has a name and optionally a description, and it can be invoked with arguments
            to produce customized prompt content from the server.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.ProtocolPrompt">
            <summary>Gets the underlying protocol <see cref="T:ModelContextProtocol.Protocol.Types.Prompt"/> type for this instance.</summary>
            <remarks>
            <para>
            This property provides direct access to the underlying protocol representation of the prompt,
            which can be useful for advanced scenarios or when implementing custom MCP client extensions.
            </para>
            <para>
            For most common use cases, you can use the more convenient <see cref="P:ModelContextProtocol.Client.McpClientPrompt.Name"/> and 
            <see cref="P:ModelContextProtocol.Client.McpClientPrompt.Description"/> properties instead of accessing the <see cref="P:ModelContextProtocol.Client.McpClientPrompt.ProtocolPrompt"/> directly.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.Name">
            <summary>Gets the name of the prompt.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientPrompt.Description">
            <summary>Gets a description of the prompt.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientPrompt.GetAsync(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Gets this prompt's content by sending a request to the server with optional arguments.
            </summary>
            <param name="arguments">Optional arguments to pass to the prompt. Keys are parameter names, and values are the argument values.</param>
            <param name="serializerOptions">The serialization options governing argument serialization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> containing the prompt's result with content and messages.</returns>
            <remarks>
            <para>
            This method sends a request to the MCP server to execute this prompt with the provided arguments.
            The server will process the request and return a result containing messages or other content.
            </para>
            <para>
            This is a convenience method that internally calls <see cref="M:ModelContextProtocol.Client.McpClientExtensions.GetPromptAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/> 
            with this prompt's name and arguments.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientResource">
            <summary>
            Represents a named resource that can be retrieved from an MCP server.
            </summary>
            <remarks>
            <para>
            This class provides a client-side wrapper around a resource defined on an MCP server. It allows
            retrieving the resource's content by sending a request to the server with the resource's URI.
            Instances of this class are typically obtained by calling <see cref="M:ModelContextProtocol.Client.McpClientExtensions.ListResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>
            or <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourcesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResource.ProtocolResource">
            <summary>Gets the underlying protocol <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> type for this instance.</summary>
            <remarks>
            <para>
            This property provides direct access to the underlying protocol representation of the resource,
            which can be useful for advanced scenarios or when implementing custom MCP client extensions.
            </para>
            <para>
            For most common use cases, you can use the more convenient <see cref="P:ModelContextProtocol.Client.McpClientResource.Name"/> and 
            <see cref="P:ModelContextProtocol.Client.McpClientResource.Description"/> properties instead of accessing the <see cref="P:ModelContextProtocol.Client.McpClientResource.ProtocolResource"/> directly.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResource.Uri">
            <summary>Gets the URI of the resource.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResource.Name">
            <summary>Gets the name of the resource.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResource.Description">
            <summary>Gets a description of the resource.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResource.MimeType">
            <summary>Gets a media (MIME) type of the resource.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientResource.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            Gets this resource's content by sending a request to the server.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> containing the resource's result with content and messages.</returns>
            <remarks>
            <para>
            This is a convenience method that internally calls <see cref="M:ModelContextProtocol.Client.McpClientExtensions.ReadResourceAsync(ModelContextProtocol.Client.IMcpClient,System.String,System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientResourceTemplate">
            <summary>
            Represents a named resource template that can be retrieved from an MCP server.
            </summary>
            <remarks>
            <para>
            This class provides a client-side wrapper around a resource template defined on an MCP server. It allows
            retrieving the resource template's content by sending a request to the server with the resource's URI.
            Instances of this class are typically obtained by calling <see cref="M:ModelContextProtocol.Client.McpClientExtensions.ListResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>
            or <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateResourceTemplatesAsync(ModelContextProtocol.Client.IMcpClient,System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResourceTemplate.ProtocolResourceTemplate">
            <summary>Gets the underlying protocol <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> type for this instance.</summary>
            <remarks>
            <para>
            This property provides direct access to the underlying protocol representation of the resource template,
            which can be useful for advanced scenarios or when implementing custom MCP client extensions.
            </para>
            <para>
            For most common use cases, you can use the more convenient <see cref="P:ModelContextProtocol.Client.McpClientResourceTemplate.UriTemplate"/> and 
            <see cref="P:ModelContextProtocol.Client.McpClientResourceTemplate.Description"/> properties instead of accessing the <see cref="P:ModelContextProtocol.Client.McpClientResourceTemplate.ProtocolResourceTemplate"/> directly.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResourceTemplate.UriTemplate">
            <summary>Gets the URI template of the resource template.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResourceTemplate.Name">
            <summary>Gets the name of the resource template.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResourceTemplate.Description">
            <summary>Gets a description of the resource template.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientResourceTemplate.MimeType">
            <summary>Gets a media (MIME) type of the resource template.</summary>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientResourceTemplate.ReadAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Gets this resource template's content by formatting a URI from the template and supplied arguments
            and sending a request to the server.
            </summary>
            <param name="arguments">A dictionary of arguments to pass to the tool. Each key represents a parameter name,
            and its associated value represents the argument value.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> containing the resource template's result with content and messages.</returns>
        </member>
        <member name="T:ModelContextProtocol.Client.McpClientTool">
            <summary>
            Provides an <see cref="T:Microsoft.Extensions.AI.AIFunction"/> that calls a tool via an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Client.McpClientTool"/> class encapsulates an <see cref="T:ModelContextProtocol.Client.IMcpClient"/> along with a description of 
            a tool available via that client, allowing it to be invoked as an <see cref="T:Microsoft.Extensions.AI.AIFunction"/>. This enables integration
            with AI models that support function calling capabilities.
            </para>
            <para>
            Tools retrieved from an MCP server can be customized for model presentation using methods like
            <see cref="M:ModelContextProtocol.Client.McpClientTool.WithName(System.String)"/> and <see cref="M:ModelContextProtocol.Client.McpClientTool.WithDescription(System.String)"/> without changing the underlying tool functionality.
            </para>
            <para>
            Typically, you would get instances of this class by calling the <see cref="M:ModelContextProtocol.Client.McpClientExtensions.ListToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/>
            or <see cref="M:ModelContextProtocol.Client.McpClientExtensions.EnumerateToolsAsync(ModelContextProtocol.Client.IMcpClient,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/> extension methods on an <see cref="T:ModelContextProtocol.Client.IMcpClient"/> instance.
            </para>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Client.McpClientTool.s_additionalProperties">
            <summary>Additional properties exposed from tools.</summary>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.ProtocolTool">
            <summary>
            Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/> type for this instance.
            </summary>
            <remarks>
            This property provides direct access to the underlying protocol representation of the tool,
            which can be useful for advanced scenarios or when implementing custom MCP client extensions.
            It contains the original metadata about the tool as provided by the server, including its
            name, description, and schema information before any customizations applied through methods
            like <see cref="M:ModelContextProtocol.Client.McpClientTool.WithName(System.String)"/> or <see cref="M:ModelContextProtocol.Client.McpClientTool.WithDescription(System.String)"/>.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.Name">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.Description">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.JsonSchema">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.JsonSerializerOptions">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Client.McpClientTool.AdditionalProperties">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.InvokeCoreAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.CallAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IProgress{ModelContextProtocol.ProgressNotificationValue},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Invokes the tool on the server.
            </summary>
            <param name="arguments">An optional dictionary of arguments to pass to the tool. Each key represents a parameter name,
            and its associated value represents the argument value.
            </param>
            <param name="progress">
            An optional <see cref="T:System.IProgress`1"/> to have progress notifications reported to it. Setting this to a non-<see langword="null"/>
            value will result in a progress token being included in the call, and any resulting progress notifications during the operation
            routed to this instance.
            </param>
            <param name="serializerOptions">
            The JSON serialization options governing argument serialization. If <see langword="null"/>, the default serialization options will be used.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>
            A task containing the <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> from the tool execution. The response includes
            the tool's output content, which may be structured data, text, or an error message.
            </returns>
            <remarks>
            The base <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)"/> method is overridden to invoke this <see cref="M:ModelContextProtocol.Client.McpClientTool.CallAsync(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.IProgress{ModelContextProtocol.ProgressNotificationValue},System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)"/> method.
            The only difference in behavior is <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)"/> will serialize the resulting <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/>"/>
            such that the <see cref="T:System.Object"/> returned is a <see cref="T:System.Text.Json.JsonElement"/> containing the serialized <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/>.
            This <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> method is intended to be called directly by user code, whereas the base <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)"/>
            is intended to be used polymorphically via the base class, typically as part of an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> operation.
            </remarks>
            <exception cref="T:ModelContextProtocol.McpException">The server could not find the requested tool, or the server encountered an error while processing the request.</exception>
            <example>
            <code>
            var result = await tool.CallAsync(
                new Dictionary&lt;string, object?&gt;
                {
                    ["message"] = "Hello MCP!"
                });
            </code>
            </example>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.WithName(System.String)">
            <summary>
            Creates a new instance of the tool but modified to return the specified name from its <see cref="P:ModelContextProtocol.Client.McpClientTool.Name"/> property.
            </summary>
            <param name="name">The model-facing name to give the tool.</param>
            <returns>A new instance of <see cref="T:ModelContextProtocol.Client.McpClientTool"/> with the provided name.</returns>
            <remarks>
            <para>
            This is useful for optimizing the tool name for specific models or for prefixing the tool name 
            with a namespace to avoid conflicts.
            </para>
            <para>
            Changing the name can help with:
            </para>
            <list type="bullet">
              <item>Making the tool name more intuitive for the model</item>
              <item>Preventing name collisions when using tools from multiple sources</item>
              <item>Creating specialized versions of a general tool for specific contexts</item>
            </list>
            <para>
            When invoking <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)"/>, the MCP server will still be called with 
            the original tool name, so no mapping is required on the server side. This new name only affects
            the value returned from this instance's <see cref="P:Microsoft.Extensions.AI.AITool.Name"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.WithDescription(System.String)">
            <summary>
            Creates a new instance of the tool but modified to return the specified description from its <see cref="P:ModelContextProtocol.Client.McpClientTool.Description"/> property.
            </summary>
            <param name="description">The description to give the tool.</param>
            <remarks>
            <para>
            Changing the description can help the model better understand the tool's purpose or provide more
            context about how the tool should be used. This is particularly useful when:
            </para>
            <list type="bullet">
              <item>The original description is too technical or lacks clarity for the model</item>
              <item>You want to add example usage scenarios to improve the model's understanding</item>
              <item>You need to tailor the tool's description for specific model requirements</item>
            </list>
            <para>
            When invoking <see cref="M:Microsoft.Extensions.AI.AIFunction.InvokeAsync(Microsoft.Extensions.AI.AIFunctionArguments,System.Threading.CancellationToken)"/>, the MCP server will still be called with 
            the original tool description, so no mapping is required on the server side. This new description only affects
            the value returned from this instance's <see cref="P:Microsoft.Extensions.AI.AITool.Description"/>.
            </para>
            </remarks>
            <returns>A new instance of <see cref="T:ModelContextProtocol.Client.McpClientTool"/> with the provided description.</returns>
        </member>
        <member name="M:ModelContextProtocol.Client.McpClientTool.WithProgress(System.IProgress{ModelContextProtocol.ProgressNotificationValue})">
            <summary>
            Creates a new instance of the tool but modified to report progress via the specified <see cref="T:System.IProgress`1"/>.
            </summary>
            <param name="progress">The <see cref="T:System.IProgress`1"/> to which progress notifications should be reported.</param>
            <remarks>
            <para>
            Adding an <see cref="T:System.IProgress`1"/> to the tool does not impact how it is reported to any AI model.
            Rather, when the tool is invoked, the request to the MCP server will include a unique progress token,
            and any progress notifications issued by the server with that progress token while the operation is in
            flight will be reported to the <paramref name="progress"/> instance.
            </para>
            <para>
            Only one <see cref="T:System.IProgress`1"/> can be specified at a time. Calling <see cref="M:ModelContextProtocol.Client.McpClientTool.WithProgress(System.IProgress{ModelContextProtocol.ProgressNotificationValue})"/> again
            will overwrite any previously specified progress instance.
            </para>
            </remarks>
            <returns>A new instance of <see cref="T:ModelContextProtocol.Client.McpClientTool"/>, configured with the provided progress instance.</returns>
        </member>
        <member name="P:ModelContextProtocol.Diagnostics.ShortSecondsBucketBoundaries">
            <summary>
            Follows boundaries from http.server.request.duration/http.client.request.duration
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Diagnostics.LongSecondsBucketBoundaries">
            <summary>
            Not based on a standard. Larger bucket sizes for longer lasting operations, e.g. HTTP connection duration.
            See https://github.com/open-telemetry/semantic-conventions/issues/336
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Hosting.SingleSessionMcpServerHostedService">
            <summary>
            Hosted service for a single-session (e.g. stdio) MCP server.
            </summary>
            <param name="session">The server representing the session being hosted.</param>
            <param name="lifetime">
            The host's application lifetime. If available, it will have termination requested when the session's run completes.
            </param>
        </member>
        <member name="M:ModelContextProtocol.Hosting.SingleSessionMcpServerHostedService.#ctor(ModelContextProtocol.Server.IMcpServer,Microsoft.Extensions.Hosting.IHostApplicationLifetime)">
            <summary>
            Hosted service for a single-session (e.g. stdio) MCP server.
            </summary>
            <param name="session">The server representing the session being hosted.</param>
            <param name="lifetime">
            The host's application lifetime. If available, it will have termination requested when the session's run completes.
            </param>
        </member>
        <member name="M:ModelContextProtocol.Hosting.SingleSessionMcpServerHostedService.ExecuteAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.IMcpEndpoint">
            <summary>
            Represents a client or server Model Context Protocol (MCP) endpoint.
            </summary>
            <remarks>
            <para>
            The MCP endpoint provides the core communication functionality used by both clients and servers:
            <list type="bullet">
              <item>Sending JSON-RPC requests and receiving responses.</item>
              <item>Sending notifications to the connected endpoint.</item>
              <item>Registering handlers for receiving notifications.</item>
            </list>
            </para>
            <para>
            <see cref="T:ModelContextProtocol.IMcpEndpoint"/> serves as the base interface for both <see cref="T:ModelContextProtocol.Client.IMcpClient"/> and 
            <see cref="T:ModelContextProtocol.Server.IMcpServer"/> interfaces, providing the common functionality needed for MCP protocol 
            communication. Most applications will use these more specific interfaces rather than working with 
            <see cref="T:ModelContextProtocol.IMcpEndpoint"/> directly.
            </para>
            <para>
            All MCP endpoints should be properly disposed after use as they implement <see cref="T:System.IAsyncDisposable"/>.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.SendRequestAsync(ModelContextProtocol.Protocol.Messages.JsonRpcRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request to the connected endpoint and waits for a response.
            </summary>
            <param name="request">The JSON-RPC request to send.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task containing the endpoint's response.</returns>
            <exception cref="T:System.InvalidOperationException">The transport is not connected, or another error occurs during request processing.</exception>
            <exception cref="T:ModelContextProtocol.McpException">An error occured during request processing.</exception>
            <remarks>
            This method provides low-level access to send raw JSON-RPC requests. For most use cases,
            consider using the strongly-typed extension methods that provide a more convenient API.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC message to the connected endpoint.
            </summary>
            <param name="message">
            The JSON-RPC message to send. This can be any type that implements JsonRpcMessage, such as
            JsonRpcRequest, JsonRpcResponse, JsonRpcNotification, or JsonRpcError.
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
            <exception cref="T:System.InvalidOperationException">The transport is not connected.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="message"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method provides low-level access to send any JSON-RPC message. For specific message types,
            consider using the higher-level methods such as <see cref="M:ModelContextProtocol.IMcpEndpoint.SendRequestAsync(ModelContextProtocol.Protocol.Messages.JsonRpcRequest,System.Threading.CancellationToken)"/> or extension methods
            like <see cref="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync(ModelContextProtocol.IMcpEndpoint,System.String,System.Threading.CancellationToken)"/>,
            which provide a simpler API.
            </para>
            <para>
            The method will serialize the message and transmit it using the underlying transport mechanism.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})">
            <summary>Registers a handler to be invoked when a notification for the specified method is received.</summary>
            <param name="method">The notification method.</param>
            <param name="handler">The handler to be invoked.</param>
            <returns>An <see cref="T:System.IDisposable"/> that will remove the registered handler when disposed.</returns>
        </member>
        <member name="T:ModelContextProtocol.McpEndpointExtensions">
            <summary>
            Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.IMcpEndpoint"/>.
            </summary>
            <remarks>
            <para>
            This class provides strongly-typed methods for working with the Model Context Protocol (MCP) endpoints,
            simplifying JSON-RPC communication by handling serialization and deserialization of parameters and results.
            </para>
            <para>
            These extension methods are designed to be used with both client (<see cref="T:ModelContextProtocol.Client.IMcpClient"/>) and
            server (<see cref="T:ModelContextProtocol.Server.IMcpServer"/>) implementations of the <see cref="T:ModelContextProtocol.IMcpEndpoint"/> interface.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendRequestAsync``2(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.JsonSerializerOptions,ModelContextProtocol.Protocol.Messages.RequestId,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request and attempts to deserialize the result to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TParameters">The type of the request parameters to serialize from.</typeparam>
            <typeparam name="TResult">The type of the result to deserialize to.</typeparam>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="requestId">The request id for the request.</param>
            <param name="serializerOptions">The options governing request serialization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deserialized result.</returns>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendRequestAsync``2(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``1},ModelContextProtocol.Protocol.Messages.RequestId,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request and attempts to deserialize the result to <typeparamref name="TResult"/>.
            </summary>
            <typeparam name="TParameters">The type of the request parameters to serialize from.</typeparam>
            <typeparam name="TResult">The type of the result to deserialize to.</typeparam>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="parametersTypeInfo">The type information for request parameter serialization.</param>
            <param name="resultTypeInfo">The type information for request parameter deserialization.</param>
            <param name="requestId">The request id for the request.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the deserialized result.</returns>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync(ModelContextProtocol.IMcpEndpoint,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a parameterless notification to the connected endpoint.
            </summary>
            <param name="client">The MCP client or server instance.</param>
            <param name="method">The notification method name.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
            <remarks>
            <para>
            This method sends a notification without any parameters. Notifications are one-way messages 
            that don't expect a response. They are commonly used for events, status updates, or to signal 
            changes in state.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync``1(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
            <summary>
            Sends a notification with parameters to the connected endpoint.
            </summary>
            <typeparam name="TParameters">The type of the notification parameters to serialize.</typeparam>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name for the notification.</param>
            <param name="parameters">Object representing the notification parameters.</param>
            <param name="serializerOptions">The options governing parameter serialization. If null, default options are used.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
            <remarks>
            <para>
            This method sends a notification with parameters to the connected endpoint. Notifications are one-way 
            messages that don't expect a response, commonly used for events, status updates, or signaling changes.
            </para>
            <para>
            The parameters object is serialized to JSON according to the provided serializer options or the default 
            options if none are specified.
            </para>
            <para>
            The Model Context Protocol defines several standard notification methods in <see cref="T:ModelContextProtocol.Protocol.Messages.NotificationMethods"/>,
            but custom methods can also be used for application-specific notifications.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.SendNotificationAsync``1(ModelContextProtocol.IMcpEndpoint,System.String,``0,System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a notification to the server with parameters.
            </summary>
            <param name="endpoint">The MCP client or server instance.</param>
            <param name="method">The JSON-RPC method name to invoke.</param>
            <param name="parameters">Object representing the request parameters.</param>
            <param name="parametersTypeInfo">The type information for request parameter serialization.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:ModelContextProtocol.McpEndpointExtensions.NotifyProgressAsync(ModelContextProtocol.IMcpEndpoint,ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.ProgressNotificationValue,System.Threading.CancellationToken)">
            <summary>
            Notifies the connected endpoint of progress for a long-running operation.
            </summary>
            <param name="endpoint">The endpoint issuing the notification.</param>
            <param name="progressToken">The <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> identifying the operation for which progress is being reported.</param>
            <param name="progress">The progress update to send, containing information such as percentage complete or status message.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the completion of the notification operation (not the operation being tracked).</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="endpoint"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method sends a progress notification to the connected endpoint using the Model Context Protocol's
            standardized progress notification format. Progress updates are identified by a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>
            that allows the recipient to correlate multiple updates with a specific long-running operation.
            </para>
            <para>
            Progress notifications are sent asynchronously and don't block the operation from continuing.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.McpErrorCode">
            <summary>
            Represents standard JSON-RPC error codes as defined in the MCP specification.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.McpErrorCode.ParseError">
            <summary>
            Indicates that the JSON received could not be parsed.
            </summary>
            <remarks>
            This error occurs when the input contains malformed JSON or incorrect syntax.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.McpErrorCode.InvalidRequest">
            <summary>
            Indicates that the JSON payload does not conform to the expected Request object structure.
            </summary>
            <remarks>
            The request is considered invalid if it lacks required fields or fails to follow the JSON-RPC protocol.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.McpErrorCode.MethodNotFound">
            <summary>
            Indicates that the requested method does not exist or is not available on the server.
            </summary>
            <remarks>
            This error is returned when the method name specified in the request cannot be found.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.McpErrorCode.InvalidParams">
            <summary>
            Indicates that one or more parameters provided in the request are invalid.
            </summary>
            <remarks>
            This error is returned when the parameters do not match the expected method signature or constraints.
            This includes cases where required parameters are missing or not understood, such as when a name for
            a tool or prompt is not recognized.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.McpErrorCode.InternalError">
            <summary>
            Indicates that an internal error occurred while processing the request.
            </summary>
            <remarks>
            This error is used when the endpoint encounters an unexpected condition that prevents it from fulfilling the request.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.McpException">
            <summary>
            Represents an exception that is thrown when an Model Context Protocol (MCP) error occurs.
            </summary>
            <remarks>
            This exception is used to represent failures to do with protocol-level concerns, such as invalid JSON-RPC requests,
            invalid parameters, or internal errors. It is not intended to be used for application-level errors.
            <see cref="P:System.Exception.Message"/> or <see cref="P:ModelContextProtocol.McpException.ErrorCode"/> from a <see cref="T:ModelContextProtocol.McpException"/> may be 
            propagated to the remote endpoint; sensitive information should not be included. If sensitive details need
            to be included, a different exception type should be used.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.McpException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.McpException"/> class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.McpException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.McpException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ModelContextProtocol.McpException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.McpException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="M:ModelContextProtocol.McpException.#ctor(System.String,ModelContextProtocol.McpErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.McpException"/> class with a specified error message and JSON-RPC error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="errorCode">A <see cref="T:ModelContextProtocol.McpErrorCode"/>.</param>
        </member>
        <member name="M:ModelContextProtocol.McpException.#ctor(System.String,System.Exception,ModelContextProtocol.McpErrorCode)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.McpException"/> class with a specified error message, inner exception, and JSON-RPC error code.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
            <param name="errorCode">A <see cref="T:ModelContextProtocol.McpErrorCode"/>.</param>
        </member>
        <member name="P:ModelContextProtocol.McpException.ErrorCode">
            <summary>
            Gets the error code associated with this exception.
            </summary>
            <remarks>
            This property contains a standard JSON-RPC error code as defined in the MCP specification. Common error codes include:
            <list type="bullet">
            <item><description>-32700: Parse error - Invalid JSON received</description></item>
            <item><description>-32600: Invalid request - The JSON is not a valid Request object</description></item>
            <item><description>-32601: Method not found - The method does not exist or is not available</description></item>
            <item><description>-32602: Invalid params - Invalid method parameters</description></item>
            <item><description>-32603: Internal error - Internal JSON-RPC error</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.NullProgress">
            <summary>Provides an <see cref="T:System.IProgress`1"/> that's a nop.</summary>
        </member>
        <member name="P:ModelContextProtocol.NullProgress.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:ModelContextProtocol.NullProgress"/> class that performs no operations when progress is reported.
            </summary>
            <remarks>
            Use this property when you need to provide an <see cref="T:System.IProgress`1"/> implementation 
            but don't need to track or report actual progress.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.NullProgress.Report(ModelContextProtocol.ProgressNotificationValue)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.ProgressNotificationValue">
            <summary>Provides a progress value that can be sent using <see cref="T:System.IProgress`1"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Progress">
            <summary>
            Gets or sets the progress thus far.
            </summary>
            <remarks>
            <para>
            This value typically represents either a percentage (0-100) or the number of items processed so far (when used with the <see cref="P:ModelContextProtocol.ProgressNotificationValue.Total"/> property).
            </para>
            <para>
            When reporting progress, this value should increase monotonically as the operation proceeds.
            Values are typically between 0 and 100 when representing percentages, or can be any positive number
            when representing completed items in combination with the <see cref="P:ModelContextProtocol.ProgressNotificationValue.Total"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Total">
            <summary>Gets or sets the total number of items to process (or total progress required), if known.</summary>
        </member>
        <member name="P:ModelContextProtocol.ProgressNotificationValue.Message">
            <summary>Gets or sets an optional message describing the current progress.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.CancelledNotification">
            <summary>
            Represents a notification indicating that a request has been cancelled by the client,
            and that any associated processing should cease immediately.
            </summary>
            <remarks>
            This class is typically used in conjunction with the <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.CancelledNotification"/>
            method identifier. When a client sends this notification, the server should attempt to
            cancel any ongoing operations associated with the specified request ID.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.CancelledNotification.RequestId">
            <summary>
            Gets or sets the ID of the request to cancel.
            </summary>
            <remarks>
            This must match the ID of an in-flight request that the sender wishes to cancel.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.CancelledNotification.Reason">
            <summary>
            Gets or sets an optional string describing the reason for the cancellation request.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcError">
            <summary>
            Represents an error response message in the JSON-RPC protocol.
            </summary>
            <remarks>
            <para>
            Error responses are sent when a request cannot be fulfilled or encounters an error during processing.
            Like successful responses, error messages include the same ID as the original request, allowing the
            sender to match errors with their corresponding requests.
            </para>
            <para>
            Each error response contains a structured error detail object with a numeric code, descriptive message,
            and optional additional data to provide more context about the error.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcError.Error">
            <summary>
            Gets detailed error information for the failed request, containing an error code, 
            message, and optional additional data
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail">
            <summary>
            Represents detailed error information for JSON-RPC error responses.
            </summary>
            <remarks>
            This class is used as part of the <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcError"/> message to provide structured 
            error information when a request cannot be fulfilled. The JSON-RPC 2.0 specification defines
            a standard format for error responses that includes a numeric code, a human-readable message,
            and optional additional data.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Code">
            <summary>
            Gets an integer error code according to the JSON-RPC specification.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Message">
            <summary>
            Gets a short description of the error.
            </summary>
            <remarks>
            This is expected to be a brief, human-readable explanation of what went wrong.
            For standard error codes, it's recommended to use the descriptions defined 
            in the JSON-RPC 2.0 specification.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcErrorDetail.Data">
            <summary>
            Gets optional additional error data.
            </summary>
            <remarks>
            This property can contain any additional information that might help the client
            understand or resolve the error. Common examples include validation errors,
            stack traces (in development environments), or contextual information about
            the error condition.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcMessage">
            <summary>
            Represents any JSON-RPC message used in the Model Context Protocol (MCP).
            </summary>
            <remarks>
            This interface serves as the foundation for all message types in the JSON-RPC 2.0 protocol
            used by MCP, including requests, responses, notifications, and errors. JSON-RPC is a stateless,
            lightweight remote procedure call (RPC) protocol that uses JSON as its data format.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcMessage.JsonRpc">
            <summary>
            Gets the JSON-RPC protocol version used.
            </summary>
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcMessage.RelatedTransport">
            <summary>
            Gets or sets the transport the <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcMessage"/> was received on or should be sent over.
            </summary>
            <remarks>
            This is used to support the Streamable HTTP transport where the specification states that the server
            SHOULD include JSON-RPC responses in the HTTP response body for the POST request containing
            the corresponding JSON-RPC request. It may be <see langword="null"/> for other transports.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcMessageWithId">
            <summary>
            Represents a JSON-RPC message used in the Model Context Protocol (MCP) and that includes an ID.
            </summary>
            <remarks>
            In the JSON-RPC protocol, messages with an ID require a response from the receiver.
            This includes request messages (which expect a matching response) and response messages
            (which include the ID of the original request they're responding to).
            The ID is used to correlate requests with their responses, allowing asynchronous
            communication where multiple requests can be sent without waiting for responses.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcMessageWithId.Id">
            <summary>
            Gets the message identifier.
            </summary>
            <remarks>
            Each ID is expected to be unique within the context of a given session.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcNotification">
            <summary>
            Represents a notification message in the JSON-RPC protocol.
            </summary>
            <remarks>
            Notifications are messages that do not require a response and are not matched with a response message.
            They are useful for one-way communication, such as log notifications and progress updates.
            Unlike requests, notifications do not include an ID field, since there will be no response to match with it.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcNotification.Method">
            <summary>
            Gets or sets the name of the notification method.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcNotification.Params">
            <summary>
            Gets or sets optional parameters for the notification.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest">
            <summary>
            A request message in the JSON-RPC protocol.
            </summary>
            <remarks>
            Requests are messages that require a response from the receiver. Each request includes a unique ID
            that will be included in the corresponding response message (either a success response or an error).
            
            The receiver of a request message is expected to execute the specified method with the provided parameters
            and return either a <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcResponse"/> with the result, or a <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcError"/>
            if the method execution fails.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.Method">
            <summary>
            Name of the method to invoke.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcRequest.Params">
            <summary>
            Optional parameters for the method.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.JsonRpcResponse">
            <summary>
            A successful response message in the JSON-RPC protocol.
            </summary>
            <remarks>
            <para>
            Response messages are sent in reply to a request message and contain the result of the method execution.
            Each response includes the same ID as the original request, allowing the sender to match responses
            with their corresponding requests.
            </para>
            <para>
            This class represents a successful response with a result. For error responses, see <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcError"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.JsonRpcResponse.Result">
            <summary>
            Gets the result of the method invocation.
            </summary>
            <remarks>
            This property contains the result data returned by the server in response to the JSON-RPC method request.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.NotificationMethods">
            <summary>
            Provides constants with the names of common notification methods used in the MCP protocol.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ToolListChangedNotification">
            <summary>
            The name of notification sent by a server when the list of available tools changes.
            </summary>
            <remarks>
            This notification informs clients that the set of available tools has been modified.
            Changes may include tools being added, removed, or updated. Upon receiving this 
            notification, clients may refresh their tool list by calling the appropriate 
            method to get the updated list of tools.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.PromptListChangedNotification">
            <summary>
            The name of the notification sent by the server when the list of available prompts changes.
            </summary>
            <remarks>
            This notification informs clients that the set of available prompts has been modified.
            Changes may include prompts being added, removed, or updated. Upon receiving this 
            notification, clients may refresh their prompt list by calling the appropriate 
            method to get the updated list of prompts.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceListChangedNotification">
            <summary>
            The name of the notification sent by the server when the list of available resources changes.
            </summary>
            <remarks>
            This notification informs clients that the set of available resources has been modified.
            Changes may include resources being added, removed, or updated. Upon receiving this 
            notification, clients may refresh their resource list by calling the appropriate 
            method to get the updated list of resources.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceUpdatedNotification">
            <summary>
            The name of the notification sent by the server when a resource is updated.
            </summary>
            <remarks>
            This notification is used to inform clients about changes to a specific resource they have subscribed to.
            When a resource is updated, the server sends this notification to all clients that have subscribed to that resource.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.RootsUpdatedNotification">
            <summary>
            The name of the notification sent by the client when roots have been updated.
            </summary>
            <remarks>
            <para>
            This notification informs the server that the client's "roots" have changed. 
            Roots define the boundaries of where servers can operate within the filesystem, 
            allowing them to understand which directories and files they have access to. Servers 
            can request the list of roots from supporting clients and receive notifications when that list changes.
            </para>
            <para>
            After receiving this notification, servers may refresh their knowledge of roots by calling the appropriate 
            method to get the updated list of roots from the client.
            </para>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.LoggingMessageNotification">
            <summary>
            The name of the notification sent by the server when a log message is generated.
            </summary>
            <remarks>
            <para>
            This notification is used by the server to send log messages to clients. Log messages can include
            different severity levels, such as debug, info, warning, or error, and an optional logger name to
            identify the source component.
            </para>
            <para>
            The minimum logging level that triggers notifications can be controlled by clients using the
            <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel"/> request. If no level has been set by a client, 
            the server may determine which messages to send based on its own configuration.
            </para>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.InitializedNotification">
            <summary>
            The name of the notification sent from the client to the server after initialization has finished.
            </summary>
            <remarks>
            <para>
            This notification is sent by the client after it has received and processed the server's response to the 
            <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Initialize"/> request. It signals that the client is ready to begin normal operation 
            and that the initialization phase is complete.
            </para>
            <para>
            After receiving this notification, the server can begin sending notifications and processing
            further requests from the client.
            </para>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification">
            <summary>
            The name of the notification sent to inform the receiver of a progress update for a long-running request.
            </summary>
            <remarks>
            <para>
            This notification provides updates on the progress of long-running operations. It includes
            a progress token that associates the notification with a specific request, the current progress value,
            and optionally, a total value and a descriptive message.
            </para>
            <para>
            Progress notifications may be sent by either the client or the server, depending on the context.
            Progress notifications enable clients to display progress indicators for operations that might take
            significant time to complete, such as large file uploads, complex computations, or resource-intensive
            processing tasks.
            </para>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.CancelledNotification">
            <summary>
            The name of the notification sent to indicate that a previously-issued request should be canceled.
            </summary>
            <remarks>
            <para>
            From the issuer's perspective, the request should still be in-flight. However, due to communication latency,
            it is always possible that this notification may arrive after the request has already finished.
            </para>
            <para>
            This notification indicates that the result will be unused, so any associated processing SHOULD cease.
            </para>
            <para>
            A client must not attempt to cancel its `initialize` request.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.PaginatedResult">
            <summary>
            Provides a base class for result payloads that support cursor-based pagination.
            </summary>
            <remarks>
            <para>
            Pagination allows API responses to be broken into smaller, manageable chunks when
            there are potentially many results to return or when dynamically-computed results
            may incur measurable latency.
            </para>
            <para>
            Classes that inherit from <see cref="T:ModelContextProtocol.Protocol.Messages.PaginatedResult"/> implement cursor-based pagination,
            where the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property serves as an opaque token pointing to the next 
            set of results.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor">
            <summary>
            Gets or sets an opaque token representing the pagination position after the last returned result.
            </summary>
            <remarks>
            When a paginated result has more data available, the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> 
            property will contain a non-<see langword="null"/> token that can be used in subsequent requests
            to fetch the next page. When there are no more results to return, the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property
            will be <see langword="null"/>.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressNotification">
            <summary>
            Represents an out-of-band notification used to inform the receiver of a progress update for a long-running request.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for more details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressNotification.ProgressToken">
            <summary>
            Gets or sets the progress token which was given in the initial request, used to associate this notification with 
            the corresponding request.
            </summary>
            <remarks>
            <para>
            This token acts as a correlation identifier that links progress updates to their corresponding request.
            </para>
            <para>
            When an endpoint initiates a request with a <see cref="P:ModelContextProtocol.Protocol.Messages.ProgressNotification.ProgressToken"/> in its metadata, 
            the receiver can send progress notifications using this same token. This allows both sides to 
            correlate the notifications with the original request.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressNotification.Progress">
            <summary>
            Gets or sets the progress thus far.
            </summary>
            <remarks>
            This should increase for each notification issued as part of the same request, even if the total is unknown.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter">
            <summary>
            Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressNotification"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressNotification.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.ProgressNotification,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressToken">
            <summary>
            Represents a progress token, which can be either a string or an integer.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.ProgressToken._token">
            <summary>The token, either a string or a boxed long or null.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.ProgressToken.Token">
            <summary>Gets the underlying object for this token.</summary>
            <remarks>This will either be a <see cref="T:System.String"/>, a boxed <see cref="T:System.Int64"/>, or <see langword="null"/>.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.ToString">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Equals(ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.op_Equality(ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.op_Inequality(ModelContextProtocol.Protocol.Messages.ProgressToken,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter">
            <summary>
            Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> that handles both string and number values.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.ProgressToken.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.ProgressToken,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestId">
            <summary>
            Represents a JSON-RPC request identifier, which can be either a string or an integer.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestId._id">
            <summary>The id, either a string or a boxed long or null.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.#ctor(System.Int64)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/> with a specified value.</summary>
            <param name="value">The required ID value.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Messages.RequestId.Id">
            <summary>Gets the underlying object for this id.</summary>
            <remarks>This will either be a <see cref="T:System.String"/>, a boxed <see cref="T:System.Int64"/>, or <see langword="null"/>.</remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.ToString">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Equals(ModelContextProtocol.Protocol.Messages.RequestId)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.op_Equality(ModelContextProtocol.Protocol.Messages.RequestId,ModelContextProtocol.Protocol.Messages.RequestId)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.op_Inequality(ModelContextProtocol.Protocol.Messages.RequestId,ModelContextProtocol.Protocol.Messages.RequestId)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestId.Converter">
            <summary>
            Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/> that handles both string and number values.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Messages.RequestId.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.RequestId,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Messages.RequestMethods">
            <summary>
            Provides constants with the names of common request methods used in the MCP protocol.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList">
            <summary>
            The name of the request method sent from the client to request a list of the server's tools.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall">
            <summary>
            The name of the request method sent from the client to request that the server invoke a specific tool.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList">
            <summary>
            The name of the request method sent from the client to request a list of the server's prompts.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet">
            <summary>
            The name of the request method sent by the client to get a prompt provided by the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList">
            <summary>
            The name of the request method sent from the client to request a list of the server's resources.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead">
            <summary>
            The name of the request method sent from the client to read a specific server resource.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList">
            <summary>
            The name of the request method sent from the client to request a list of the server's resource templates.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe">
            <summary>
            The name of the request method sent from the client to request <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceUpdatedNotification"/> 
            notifications from the server whenever a particular resource changes.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesUnsubscribe">
            <summary>
            The name of the request method sent from the client to request unsubscribing from <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceUpdatedNotification"/> 
            notifications from the server.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList">
            <summary>
            The name of the request method sent from the server to request a list of the client's roots.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Ping">
            <summary>
            The name of the request method sent by either endpoint to check that the connected endpoint is still alive.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel">
            <summary>
            The name of the request method sent from the client to the server to adjust the logging level.
            </summary>
            <remarks>
            This request allows clients to control which log messages they receive from the server
            by setting a minimum severity threshold. After processing this request, the server will
            send log messages with severity at or above the specified level to the client as
            <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.LoggingMessageNotification"/> notifications.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete">
            <summary>
            The name of the request method sent from the client to the server to ask for completion suggestions.
            </summary>
            <remarks>
            This is used to provide autocompletion-like functionality for arguments in a resource reference or a prompt template.
            The client provides a reference (resource or prompt), argument name, and partial value, and the server 
            responds with matching completion options.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.SamplingCreateMessage">
            <summary>
            The name of the request method sent from the server to sample an large language model (LLM) via the client.
            </summary>
            <remarks>
            This request allows servers to utilize an LLM available on the client side to generate text or image responses
            based on provided messages. It is part of the sampling capability in the Model Context Protocol and enables servers to access
            client-side AI models without needing direct API access to those models.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Initialize">
            <summary>
            The name of the request method sent from the client to the server when it first connects, asking it initialize.
            </summary>
            <remarks>
            The initialize request is the first request sent by the client to the server. It provides client information
            and capabilities to the server during connection establishment. The server responds with its own capabilities
            and information, establishing the protocol version and available features for the session.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.IClientTransport">
            <summary>
            Represents a transport mechanism for Model Context Protocol (MCP) client-to-server communication.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> interface abstracts the communication layer between MCP clients
            and servers, allowing different transport protocols to be used interchangeably.
            </para>
            <para>
            When creating an <see cref="T:ModelContextProtocol.Client.IMcpClient"/>, <see cref="T:ModelContextProtocol.Client.McpClientFactory"/> is typically used, and is
            provided with the <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> based on expected server configuration.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.IClientTransport.Name">
            <summary>
            Gets a transport identifier, used for logging purposes.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.IClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously establishes a transport session with an MCP server and returns a transport for the duplex message stream.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>Returns an interface for the duplex message stream.</returns>
            <remarks>
            <para>
            This method is responsible for initializing the connection to the server using the specific transport 
            mechanism implemented by the derived class. The returned <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> interface 
            provides methods to send and receive messages over the established connection.
            </para>
            <para>
            The lifetime of the returned <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> instance is typically managed by the 
            <see cref="T:ModelContextProtocol.Client.McpClient"/> that uses this transport. When the client is disposed, it will dispose
            the transport session as well.
            </para>
            <para>
            This method is used by <see cref="T:ModelContextProtocol.Client.McpClientFactory"/> to initialize the connection.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">The transport connection could not be established.</exception>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.ITransport">
            <summary>
            Represents a transport mechanism for MCP (Model Context Protocol) communication between clients and servers.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> interface is the core abstraction for bidirectional communication.
            It provides methods for sending and receiving messages, abstracting away the underlying transport mechanism
            and allowing protocol implementations to be decoupled from communication details.
            </para>
            <para>
            Implementations of <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> handle the serialization, transmission, and reception of
            messages over various channels like standard input/output streams and HTTP (Server-Sent Events).
            </para>
            <para>
            While <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> is responsible for establishing a client's connection,
            <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> represents an established session. Client implementations typically obtain an
            <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> instance by calling <see cref="M:ModelContextProtocol.Protocol.Transport.IClientTransport.ConnectAsync(System.Threading.CancellationToken)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.ITransport.MessageReader">
            <summary>
            Gets a channel reader for receiving messages from the transport.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ModelContextProtocol.Protocol.Transport.ITransport.MessageReader"/> provides access to incoming JSON-RPC messages received by the transport.
            It returns a <see cref="T:System.Threading.Channels.ChannelReader`1"/> which allows consuming messages in a thread-safe manner.
            </para>
            <para>
            The reader will continue to provide messages as long as the transport is connected. When the transport
            is disconnected or disposed, the channel will be completed and no more messages will be available after
            any already transmitted messages are consumed.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.ITransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC message through the transport.
            </summary>
            <param name="message">The JSON-RPC message to send.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
            <exception cref="T:System.InvalidOperationException">The transport is not connected.</exception>
            <remarks>
            <para>
            This method serializes and sends the provided JSON-RPC message through the transport connection.
            </para>
            <para>
            This is a core method used by higher-level abstractions in the MCP protocol implementation.
            Most client code should use the higher-level methods provided by <see cref="T:ModelContextProtocol.IMcpEndpoint"/>,
            <see cref="T:ModelContextProtocol.McpEndpointExtensions"/>, <see cref="T:ModelContextProtocol.Client.McpClientExtensions"/>, or <see cref="T:ModelContextProtocol.Server.McpServerExtensions"/>,
            rather than accessing this method directly.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport">
            <summary>
            The ServerSideEvents client transport implementation
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.String)">
            <summary>
            SSE transport for client endpoints. Unlike stdio it does not launch a process, but connects to an existing server.
            The HTTP server can be local or remote, and must support the SSE protocol.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="httpClient">The HTTP client instance used for requests.</param>
            <param name="loggerFactory">Logger factory for creating loggers.</param>
            <param name="endpointName">The endpoint name used for logging purposes.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientSessionTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> over HTTP using the Server-Sent Events (SSE) protocol.
            </summary>
            <remarks>
            This transport connects to an MCP server over HTTP using SSE,
            allowing for real-time server-to-client communication with a standard HTTP request.
            Unlike the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport"/>, this transport connects to an existing server
            rather than launching a new process.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.SseClientTransport"/> class.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="loggerFactory">Logger factory for creating loggers used for diagnostic output during transport operations.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.SseClientTransportOptions,System.Net.Http.HttpClient,Microsoft.Extensions.Logging.ILoggerFactory,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.SseClientTransport"/> class with a provided HTTP client.
            </summary>
            <param name="transportOptions">Configuration options for the transport.</param>
            <param name="httpClient">The HTTP client instance used for requests.</param>
            <param name="loggerFactory">Logger factory for creating loggers used for diagnostic output during transport operations.</param>
            <param name="ownsHttpClient">
            <see langword="true"/> to dispose of <paramref name="httpClient"/> when the transport is disposed; 
            <see langword="false"/> if the caller is retaining ownership of the <paramref name="httpClient"/>'s lifetime.
            </param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransport.Name">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseClientTransport.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions">
            <summary>
            Provides options for configuring <see cref="T:ModelContextProtocol.Protocol.Transport.SseClientTransport"/> instances.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.Endpoint">
            <summary>
            Gets or sets the base address of the server for SSE connections.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.UseStreamableHttp">
            <summary>
            Gets or sets a value indicating whether to use "Streamable HTTP" for the transport rather than "HTTP with SSE". Defaults to false.
            <see href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports#streamable-http">Streamable HTTP transport specification</see>.
            <see href="https://modelcontextprotocol.io/specification/2024-11-05/basic/transports#http-with-sse">HTTP with SSE transport specification</see>.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.Name">
            <summary>
            Gets a transport identifier used for logging purposes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.ConnectionTimeout">
            <summary>
            Gets or sets a timeout used to establish the initial connection to the SSE server. Defaults to 30 seconds.
            </summary>
            <remarks>
            This timeout controls how long the client waits for:
            <list type="bullet">
              <item><description>The initial HTTP connection to be established with the SSE server</description></item>
              <item><description>The endpoint event to be received, which indicates the message endpoint URL</description></item>
            </list>
            If the timeout expires before the connection is established, a <see cref="T:System.TimeoutException"/> will be thrown.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseClientTransportOptions.AdditionalHeaders">
            <summary>
            Gets custom HTTP headers to include in requests to the SSE server.
            </summary>
            <remarks>
            Use this property to specify custom HTTP headers that should be sent with each request to the server.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> implementation using Server-Sent Events (SSE) for server-to-client communication.
            </summary>
            <remarks>
            <para>
            This transport provides one-way communication from server to client using the SSE protocol over HTTP,
            while receiving client messages through a separate mechanism. It writes messages as 
            SSE events to a response stream, typically associated with an HTTP response.
            </para>
            <para>
            This transport is used in scenarios where the server needs to push messages to the client in real-time,
            such as when streaming completion results or providing progress updates during long-running operations.
            </para>
            </remarks>
            <param name="sseResponseStream">The response stream to write MCP JSON-RPC messages as SSE events to.</param>
            <param name="messageEndpoint">
            The relative or absolute URI the client should use to post MCP JSON-RPC messages for this session.
            These messages should be passed to <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.OnMessageReceivedAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)"/>.
            Defaults to "/message".
            </param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.#ctor(System.IO.Stream,System.String)">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> implementation using Server-Sent Events (SSE) for server-to-client communication.
            </summary>
            <remarks>
            <para>
            This transport provides one-way communication from server to client using the SSE protocol over HTTP,
            while receiving client messages through a separate mechanism. It writes messages as 
            SSE events to a response stream, typically associated with an HTTP response.
            </para>
            <para>
            This transport is used in scenarios where the server needs to push messages to the client in real-time,
            such as when streaming completion results or providing progress updates during long-running operations.
            </para>
            </remarks>
            <param name="sseResponseStream">The response stream to write MCP JSON-RPC messages as SSE events to.</param>
            <param name="messageEndpoint">
            The relative or absolute URI the client should use to post MCP JSON-RPC messages for this session.
            These messages should be passed to <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.OnMessageReceivedAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)"/>.
            Defaults to "/message".
            </param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the transport and writes the JSON-RPC messages sent via <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)"/>
            to the SSE response stream until cancellation is requested or the transport is disposed.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the send loop that writes JSON-RPC messages to the SSE response stream.</returns>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.MessageReader">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.OnMessageReceivedAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Handles incoming JSON-RPC messages received on the /message endpoint.
            </summary>
            <param name="message">The JSON-RPC message received from the client.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the asynchronous operation to buffer the JSON-RPC message for processing.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when there is an attempt to process a message before calling <see cref="M:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.RunAsync(System.Threading.CancellationToken)"/>.</exception>
            <remarks>
            <para>
            This method is the entry point for processing client-to-server communication in the SSE transport model. 
            While the SSE protocol itself is unidirectional (server to client), this method allows bidirectional 
            communication by handling HTTP POST requests sent to the message endpoint.
            </para>
            <para>
            When a client sends a JSON-RPC message to the /message endpoint, the server calls this method to
            process the message and make it available to the MCP server via the <see cref="P:ModelContextProtocol.Protocol.Transport.SseResponseStreamTransport.MessageReader"/> channel.
            </para>
            <para>
            This method validates that the transport is connected before processing the message, ensuring proper
            sequencing of operations in the transport lifecycle.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport">
            <summary>Provides the client side of a stdio-based session transport.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
            <remarks>
            <para>
            For stdio-based transports, this implementation first verifies that the underlying process 
            is still running before attempting to send the message. If the process has exited or cannot
            be accessed, a <see cref="T:System.InvalidOperationException"/> is thrown with details about the failure.
            </para>
            <para>
            After verifying the process state, this method delegates to the base class implementation
            to handle the actual message serialization and transmission to the process's standard input stream.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Thrown when the underlying process has exited or cannot be accessed.
            </exception>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientSessionTransport.CleanupAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport">
            <summary>
            Provides a <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> implemented via "stdio" (standard input/output).
            </summary>
            <remarks>
            <para>
            This transport launches an external process and communicates with it through standard input and output streams.
            It's used to connect to MCP servers launched and hosted in child processes.
            </para>
            <para>
            The transport manages the entire lifecycle of the process: starting it with specified command-line arguments
            and environment variables, handling output, and properly terminating the process when the transport is closed.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientTransport.#ctor(ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport"/> class.
            </summary>
            <param name="options">Configuration options for the transport, including the command to execute, arguments, working directory, and environment variables.</param>
            <param name="loggerFactory">Logger factory for creating loggers used for diagnostic output during transport operations.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransport.Name">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions">
            <summary>
            Provides options for configuring <see cref="T:ModelContextProtocol.Protocol.Transport.StdioClientTransport"/> instances.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.Command">
            <summary>
            Gets or sets the command to execute to start the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.Arguments">
            <summary>
            Gets or sets the arguments to pass to the server process when it is started.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.Name">
            <summary>
            Gets or sets a transport identifier used for logging purposes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the server process.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.EnvironmentVariables">
            <summary>
            Gets or sets environment variables to set for the server process.
            </summary>
            <remarks>
            This property allows you to specify environment variables that will be set in the server process's
            environment. This is useful for passing configuration, authentication information, or runtime flags
            to the server without modifying its code.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StdioClientTransportOptions.ShutdownTimeout">
            <summary>
            Gets or sets the timeout to wait for the server to shut down gracefully.
            </summary>
            <remarks>
            <para>
            This property dictates how long the client should wait for the server process to exit cleanly during shutdown
            before forcibly terminating it. This balances between giving the server enough time to clean up 
            resources and not hanging indefinitely if a server process becomes unresponsive.
            </para>
            <para>
            The default is five seconds.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> implemented via "stdio" (standard input/output).
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(Microsoft.Extensions.Options.IOptions{ModelContextProtocol.Server.McpServerOptions},Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class.
            </summary>
            <param name="serverOptions">The server options.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class.
            </summary>
            <param name="serverOptions">The server options.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/> or contains a null name.</exception>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StdioServerTransport.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StdioServerTransport"/> class.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverName"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamableHttpClientSessionTransport">
            <summary>
            The Streamable HTTP client transport implementation
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamableHttpPostTransport">
            <summary>
            Handles processing the request/response body pairs for the Streamable HTTP transport.
            This is typically used via <see cref="P:ModelContextProtocol.Protocol.Messages.JsonRpcMessage.RelatedTransport"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpPostTransport.#ctor(System.Threading.Channels.ChannelWriter{ModelContextProtocol.Protocol.Messages.JsonRpcMessage},System.IO.Pipelines.IDuplexPipe)">
            <summary>
            Handles processing the request/response body pairs for the Streamable HTTP transport.
            This is typically used via <see cref="P:ModelContextProtocol.Protocol.Messages.JsonRpcMessage.RelatedTransport"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpPostTransport.RunAsync(System.Threading.CancellationToken)">
            <returns>
            True, if data was written to the respond body.
            False, if nothing was written because the request body did not contain any <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest"/> messages to respond to.
            The HTTP application should typically respond with an empty "202 Accepted" response in this scenario.
            </returns>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> implementation using Server-Sent Events (SSE) for server-to-client communication.
            </summary>
            <remarks>
            <para>
            This transport provides one-way communication from server to client using the SSE protocol over HTTP,
            while receiving client messages through a separate mechanism. It writes messages as 
            SSE events to a response stream, typically associated with an HTTP response.
            </para>
            <para>
            This transport is used in scenarios where the server needs to push messages to the client in real-time,
            such as when streaming completion results or providing progress updates during long-running operations.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.HandleGetRequest(System.IO.Stream,System.Threading.CancellationToken)">
            <summary>
            Handles an optional SSE GET request a client using the Streamable HTTP transport might make by
            writing any unsolicited JSON-RPC messages sent via <see cref="M:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)"/>
            to the SSE response stream until cancellation is requested or the transport is disposed.
            </summary>
            <param name="sseResponseStream">The response stream to write MCP JSON-RPC messages as SSE events to.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task representing the send loop that writes JSON-RPC messages to the SSE response stream.</returns>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.HandlePostRequest(System.IO.Pipelines.IDuplexPipe,System.Threading.CancellationToken)">
            <summary>
            Handles a Streamable HTTP POST request processing both the request body and response body ensuring that
            <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcResponse"/> and other correlated messages are sent back to the client directly in response
            to the <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest"/> that initiated the message.
            </summary>
            <param name="httpBodies">The duplex pipe facilitates the reading and writing of HTTP request and response data.</param>
            <param name="cancellationToken">This token allows for the operation to be canceled if needed.</param>
            <returns>
            True, if data was written to the respond body.
            False, if nothing was written because the request body did not contain any <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest"/> messages to respond to.
            The HTTP application should typically respond with an empty "202 Accepted" response in this scenario.
            </returns>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.MessageReader">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamableHttpServerTransport.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport">
            <summary>Provides the client side of a stream-based session transport.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.#ctor(System.IO.TextWriter,System.IO.TextReader,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport"/> class.
            </summary>
            <param name="serverInput">
            The text writer connected to the server's input stream. 
            Messages written to this writer will be sent to the server.
            </param>
            <param name="serverOutput">
            The text reader connected to the server's output stream.
            Messages read from this reader will be received from the server.
            </param>
            <param name="endpointName">
            A name that identifies this transport endpoint in logs.
            </param>
            <param name="loggerFactory">
            Optional factory for creating loggers. If null, a NullLogger will be used.
            </param>
            <remarks>
            This constructor starts a background task to read messages from the server output stream.
            The transport will be marked as connected once initialized.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.DisposeAsync">
            <inheritdoc/>
            <summary>
            Asynchronously releases all resources used by the stream client session transport.
            </summary>
            <returns>A task that represents the asynchronous dispose operation.</returns>
            <remarks>
            This method cancels ongoing operations and waits for the read task to complete
            before marking the transport as disconnected. It calls <see cref="M:ModelContextProtocol.Protocol.Transport.StreamClientSessionTransport.CleanupAsync(System.Threading.CancellationToken)"/> 
            to perform the actual cleanup work.
            After disposal, the transport can no longer be used to send or receive messages.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamClientTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.IClientTransport"/> implemented around a pair of input/output streams.
            </summary>
            <remarks>
            This transport is useful for scenarios where you already have established streams for communication,
            such as custom network protocols, pipe connections, or for testing purposes. It works with any
            readable and writable streams.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientTransport.#ctor(System.IO.Stream,System.IO.Stream,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamClientTransport"/> class.
            </summary>
            <param name="serverInput">
            The stream representing the connected server's input. 
            Writes to this stream will be sent to the server.
            </param>
            <param name="serverOutput">
            The stream representing the connected server's output.
            Reads from this stream will receive messages from the server.
            </param>
            <param name="loggerFactory">A logger factory for creating loggers.</param>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.StreamClientTransport.Name">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamClientTransport.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.StreamServerTransport">
            <summary>
            Provides an <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/> implemented using a pair of input and output streams.
            </summary>
            <remarks>
            The <see cref="T:ModelContextProtocol.Protocol.Transport.StreamServerTransport"/> class implements bidirectional JSON-RPC messaging over arbitrary
            streams, allowing MCP communication with clients through various I/O channels such as network sockets,
            memory streams, or pipes.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.#ctor(System.IO.Stream,System.IO.Stream,System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.StreamServerTransport"/> class with explicit input/output streams.
            </summary>
            <param name="inputStream">The input <see cref="T:System.IO.Stream"/> to use as standard input.</param>
            <param name="outputStream">The output <see cref="T:System.IO.Stream"/> to use as standard output.</param>
            <param name="serverName">Optional name of the server, used for diagnostic purposes, like logging.</param>
            <param name="loggerFactory">Optional logger factory used for logging employed by the transport.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputStream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outputStream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.StreamServerTransport.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Protocol.Transport.TransportBase">
            <summary>
            Provides a base class for implementing <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/>.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Transport.TransportBase"/> class provides core functionality required by most <see cref="T:ModelContextProtocol.Protocol.Transport.ITransport"/>
            implementations, including message channel management, connection state tracking, and logging support.
            </para>
            <para>
            Custom transport implementations should inherit from this class and implement the abstract
            <see cref="M:ModelContextProtocol.Protocol.Transport.TransportBase.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)"/> and <see cref="M:ModelContextProtocol.Protocol.Transport.TransportBase.DisposeAsync"/> methods
            to handle the specific transport mechanism being used.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.#ctor(System.String,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Protocol.Transport.TransportBase"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.Logger">
            <summary>Gets the logger used by this transport.</summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.Name">
            <summary>
            Gets the name that identifies this transport endpoint in logs.
            </summary>
            <remarks>
            This name is used in log messages to identify the source of transport-related events.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.IsConnected">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Transport.TransportBase.MessageReader">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.SendMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.WriteMessageAsync(ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Threading.CancellationToken)">
            <summary>
            Writes a message to the message channel.
            </summary>
            <param name="message">The message to write.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Transport.TransportBase.SetConnected(System.Boolean)">
            <summary>
            Sets the connected state of the transport.
            </summary>
            <param name="isConnected">Whether the transport is connected.</param>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Annotations">
            <summary>
            Represents annotations that can be attached to content, resources, and resource templates.
            </summary>
            <remarks>
            Annotations enable filtering and prioritization of content for different audiences.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Annotations.Audience">
            <summary>
            Gets or sets the intended audience for this content as an array of <see cref="T:ModelContextProtocol.Protocol.Types.Role"/> values.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Annotations.Priority">
            <summary>
            Gets or sets a value indicating how important this data is for operating the server.
            </summary>
            <remarks>
            The value is a floating-point number between 0 and 1, where 0 represents the lowest priority
            1 represents highest priority.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Argument">
            <summary>
            Represents an argument used in completion requests to provide context for auto-completion functionality.
            </summary>
            <remarks>
            This class is used when requesting completion suggestions for a particular field or parameter.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Argument.Name">
            <summary>
            Gets or sets the name of the argument being completed.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Argument.Value">
            <summary>
            Gets or sets the current partial text value for which completion suggestions are requested.
            </summary>
            <remarks>
            This represents the text that has been entered so far and for which completion
            options should be generated.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.BlobResourceContents">
            <summary>
            Represents the binary contents of a resource in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/> is used when binary data needs to be exchanged through
            the Model Context Protocol. The binary data is represented as a base64-encoded string
            in the <see cref="P:ModelContextProtocol.Protocol.Types.BlobResourceContents.Blob"/> property.
            </para>
            <para>
            This class inherits from <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>, which also has a sibling implementation
            <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/> for text-based resources. When working with resources, the
            appropriate type is chosen based on the nature of the content.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.BlobResourceContents.Blob">
            <summary>
            Gets or sets the base64-encoded string representing the binary data of the item.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CallToolRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall"/> request from a client to invoke a tool provided by the server.
            </summary>
            <remarks>
            The server will respond with a <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> containing the result of the tool invocation.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Name">
            <summary>Gets or sets the name of the tool to invoke.</summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments">
            <summary>
            Gets or sets optional arguments to pass to the tool when invoking it on the server.
            </summary>
            <remarks>
            This dictionary contains the parameter values to be passed to the tool. Each key-value pair represents 
            a parameter name and its corresponding argument value.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CallToolResponse">
            <summary>
            Represents the result of a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall"/> request from a client to invoke a tool provided by the server.
            </summary>
            <remarks>
            <para>
            Any errors that originate from the tool should be reported inside the result
            object, with <see cref="P:ModelContextProtocol.Protocol.Types.CallToolResponse.IsError"/> set to true, rather than as a <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcError"/>.
            </para>
            <para>
            However, any errors in finding the tool, an error indicating that the
            server does not support tool calls, or any other exceptional conditions,
            should be reported as an MCP error response.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolResponse.Content">
            <summary>
            Gets or sets the response content from the tool call.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CallToolResponse.IsError">
            <summary>
            Gets or sets an indication of whether the tool call was unsuccessful.
            </summary>
            <remarks>
            When set to <see langword="true"/>, it signifies that the tool execution failed.
            Tool errors are reported with this property set to <see langword="true"/> and details in the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolResponse.Content"/>
            property, rather than as protocol-level errors. This allows LLMs to see that an error occurred
            and potentially self-correct in subsequent requests.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ClientCapabilities">
            <summary>
            Represents the capabilities that a client may support.
            </summary>
            <remarks>
            <para>
            Capabilities define the features and functionality that a client can handle when communicating with an MCP server.
            These are advertised to the server during the initialize handshake.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Experimental">
            <summary>
            Gets or sets experimental, non-standard capabilities that the client supports.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Experimental"/> dictionary allows clients to advertise support for features that are not yet 
            standardized in the Model Context Protocol specification. This extension mechanism enables 
            future protocol enhancements while maintaining backward compatibility.
            </para>
            <para>
            Values in this dictionary are implementation-specific and should be coordinated between client 
            and server implementations. Servers should not assume the presence of any experimental capability 
            without checking for it first.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Roots">
            <summary>
            Gets or sets the client's roots capability, which are entry points for resource navigation.
            </summary>
            <remarks>
            <para>
            When <see cref="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Roots"/> is non-<see langword="null"/>, the client indicates that it can respond to 
            server requests for listing root URIs. Root URIs serve as entry points for resource navigation in the protocol.
            </para>
            <para>
            The server can use <see cref="M:ModelContextProtocol.Server.McpServerExtensions.RequestRootsAsync(ModelContextProtocol.Server.IMcpServer,ModelContextProtocol.Protocol.Types.ListRootsRequestParams,System.Threading.CancellationToken)"/> to request the list of
            available roots from the client, which will trigger the client's <see cref="P:ModelContextProtocol.Protocol.Types.RootsCapability.RootsHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.Sampling">
            <summary>
            Gets or sets the client's sampling capability, which indicates whether the client 
            supports issuing requests to an LLM on behalf of the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.NotificationHandlers">
            <summary>Gets or sets notification handlers to register with the client.</summary>
            <remarks>
            <para>
            When constructed, the client will enumerate these handlers once, which may contain multiple handlers per notification method key.
            The client will not re-enumerate the sequence after initialization.
            </para>
            <para>
            Notification handlers allow the client to respond to server-sent notifications for specific methods.
            Each key in the collection is a notification method name, and each value is a callback that will be invoked
            when a notification with that method is received.
            </para>
            <para>
            Handlers provided via <see cref="P:ModelContextProtocol.Protocol.Types.ClientCapabilities.NotificationHandlers"/> will be registered with the client for the lifetime of the client.
            For transient handlers, <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/> may be used to register a handler that can
            then be unregistered by disposing of the <see cref="T:System.IAsyncDisposable"/> returned from the method.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CompleteRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> request from 
            a client to ask a server for auto-completion suggestions.
            </summary>
            <remarks>
            <para>
            <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> is used in the Model Context Protocol completion workflow
            to provide intelligent suggestions for partial inputs related to resources, prompts, or other referenceable entities.
            The completion mechanism in MCP allows clients to request suggestions based on partial inputs.
            The server will respond with a <see cref="T:ModelContextProtocol.Protocol.Types.CompleteResult"/> containing matching values.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteRequestParams.Ref">
            <summary>
            Gets or sets the reference's information.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteRequestParams.Argument">
            <summary>
            Gets or sets the argument information for the completion request, specifying what is being completed
            and the current partial input.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CompleteResult">
            <summary>
            Represents the server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> request, 
            containing suggested values for a given argument.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.CompleteResult"/> is returned by the server in response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> 
            request from the client. It provides suggested completions or valid values for a specific argument in a tool or resource reference.
            </para>
            <para>
            The result contains a <see cref="P:ModelContextProtocol.Protocol.Types.CompleteResult.Completion"/> object with suggested values, pagination information,
            and the total number of available completions. This is similar to auto-completion functionality in code editors.
            </para>
            <para>
            Clients typically use this to implement auto-suggestion features when users are inputting parameters
            for tool calls or resource references.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompleteResult.Completion">
            <summary>
            Gets or sets the completion object containing the suggested values and pagination information.
            </summary>
            <remarks>
            If no completions are available for the given input, the <see cref="P:ModelContextProtocol.Protocol.Types.Completion.Values"/> 
            collection will be empty.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Completion">
            <summary>
            Represents a completion object in the server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> request.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.Values">
            <summary>
            Gets or sets an array of completion values (auto-suggestions) for the requested input.
            </summary>
            <remarks>
            This collection contains the actual text strings to be presented to users as completion suggestions.
            The array will be empty if no suggestions are available for the current input.
            Per the specification, this should not exceed 100 items.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.Total">
            <summary>
            Gets or sets the total number of completion options available.
            </summary>
            <remarks>
            This can exceed the number of values actually sent in the response.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Completion.HasMore">
            <summary>
            Gets or sets an indicator as to whether there are additional completion options beyond 
            those provided in the current response, even if the exact total is unknown.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CompletionsCapability">
            <summary>
            Represents the completions capability for providing auto-completion suggestions
            for prompt arguments and resource references.
            </summary>
            <remarks>
            <para>
            When enabled, this capability allows a Model Context Protocol server to provide 
            auto-completion suggestions. This capability is advertised to clients during the initialize handshake.
            </para>
            <para>
            The primary function of this capability is to improve the user experience by offering
            contextual suggestions for argument values or resource identifiers based on partial input.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CompletionsCapability.CompleteHandler">
            <summary>
            Gets or sets the handler for completion requests.
            </summary>
            <remarks>
            This handler provides auto-completion suggestions for prompt arguments or resource references in the Model Context Protocol.
            The handler receives a reference type (e.g., "ref/prompt" or "ref/resource") and the current argument value,
            and should return appropriate completion suggestions.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Content">
            <summary>
            Represents content within the Model Context Protocol (MCP) that can contain text, binary data, or references to resources.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> class is a fundamental type in the MCP that can represent different forms of content
            based on the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> property. The main content types are:
            </para>
            <list type="bullet">
              <item><description>"text" - Textual content, stored in the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Text"/> property</description></item>
              <item><description>"image" - Image data, stored as base64 in the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Data"/> property with appropriate MIME type</description></item>
              <item><description>"audio" - Audio data, stored as base64 in the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Data"/> property with appropriate MIME type</description></item>
              <item><description>"resource" - Reference to a resource, accessed through the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Resource"/> property</description></item>
            </list>
            <para>
            This class is used extensively throughout the MCP for representing content in messages, tool responses,
            and other communication between clients and servers.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Type">
            <summary>
            Gets or sets the type of content.
            </summary>
            <remarks>
            This determines the structure of the content object. Valid values include "image", "audio", "text", and "resource".
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Text">
            <summary>
            Gets or sets the text content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Data">
            <summary>
            Gets or sets the base64-encoded image or audio data.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.MimeType">
            <summary>
            Gets or sets the MIME type (or "media type") of the content, specifying the format of the data.
            </summary>
            <remarks>
            <para>
            This property is used when <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> is "image", "audio", or "resource", to indicate the specific format of the binary data.
            Common values include "image/png", "image/jpeg", "audio/wav", and "audio/mp3".
            </para>
            <para>
            This property is required when the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Data"/> property contains binary content,
            as it helps clients properly interpret and render the content.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Resource">
            <summary>
            Gets or sets the resource content of the message when <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> is "resource".
            </summary>
            <remarks>
            <para>
            This property is used to embed or reference resource data within a message. It's only 
            applicable when the <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> property is set to "resource".
            </para>
            <para>
            Resources can be either text-based (<see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>) or 
            binary (<see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/>), allowing for flexible data representation.
            Each resource has a URI that can be used for identification and retrieval.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Content.Annotations">
            <summary>
            Gets or sets optional annotations for the content.
            </summary>
            <remarks>
            These annotations can be used to specify the intended audience (<see cref="F:ModelContextProtocol.Protocol.Types.Role.User"/>, <see cref="F:ModelContextProtocol.Protocol.Types.Role.Assistant"/>, or both)
            and the priority level of the content. Clients can use this information to filter or prioritize content for different roles.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ContextInclusion">
            <summary>
            Specifies the context inclusion options for a request in the Model Context Protocol (MCP).
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.None">
            <summary>
            Indicates that no context should be included.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.ThisServer">
            <summary>
            Indicates that context from the server that sent the request should be included.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.ContextInclusion.AllServers">
            <summary>
            Indicates that context from all servers that the client is connected to should be included.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.SamplingCreateMessage"/> 
            request from a server to sample an LLM via the client.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.IncludeContext">
            <summary>
            Gets or sets an indication as to which server contexts should be included in the prompt.
            </summary>
            <remarks>
            The client may ignore this request.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.MaxTokens">
            <summary>
            Gets or sets the maximum number of tokens to generate in the LLM response, as requested by the server.
            </summary>
            <remarks>
            A token is generally a word or part of a word in the text. Setting this value helps control 
            response length and computation time. The client may choose to sample fewer tokens than requested.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Messages">
            <summary>
            Gets or sets the messages requested by the server to be included in the prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Metadata">
            <summary>
            Gets or sets optional metadata to pass through to the LLM provider.
            </summary>
            <remarks>
            The format of this metadata is provider-specific and can include model-specific settings or
            configuration that isn't covered by standard parameters. This allows for passing custom parameters 
            that are specific to certain AI models or providers.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.ModelPreferences">
            <summary>
            Gets or sets the server's preferences for which model to select.
            </summary>
            <remarks>
            <para>
            The client may ignore these preferences.
            </para>
            <para>
            These preferences help the client make an appropriate model selection based on the server's priorities
            for cost, speed, intelligence, and specific model hints.
            </para>
            <para>
            When multiple dimensions are specified (cost, speed, intelligence), the client should balance these
            based on their relative values. If specific model hints are provided, the client should evaluate them
            in order and prioritize them over numeric priorities.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.StopSequences">
            <summary>
            Gets or sets optional sequences of characters that signal the LLM to stop generating text when encountered.
            </summary>
            <remarks>
            <para>
            When the model generates any of these sequences during sampling, text generation stops immediately,
            even if the maximum token limit hasn't been reached. This is useful for controlling generation 
            endings or preventing the model from continuing beyond certain points.
            </para>
            <para>
            Stop sequences are typically case-sensitive, and typically the LLM will only stop generation when a produced
            sequence exactly matches one of the provided sequences. Common uses include ending markers like "END", punctuation
            like ".", or special delimiter sequences like "###".
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.SystemPrompt">
            <summary>
            Gets or sets an optional system prompt the server wants to use for sampling.
            </summary>
            <remarks>
            The client may modify or omit this prompt.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams.Temperature">
            <summary>
            Gets or sets the temperature to use for sampling, as requested by the server.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.CreateMessageResult">
            <summary>
            Represents a client's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.SamplingCreateMessage"/> from the server.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Content">
            <summary>
            Gets or sets the content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Model">
            <summary>
            Gets or sets the name of the model that generated the message.
            </summary>
            <remarks>
            <para>
            This should contain the specific model identifier such as "claude-3-5-sonnet-20241022" or "o3-mini".
            </para>
            <para>
            This property allows the server to know which model was used to generate the response,
            enabling appropriate handling based on the model's capabilities and characteristics.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.StopReason">
            <summary>
            Gets or sets the reason why message generation (sampling) stopped, if known.
            </summary>
            <remarks>
            Common values include:
            <list type="bullet">
              <item><term>endTurn</term><description>The model naturally completed its response.</description></item>
              <item><term>maxTokens</term><description>The response was truncated due to reaching token limits.</description></item>
              <item><term>stopSequence</term><description>A specific stop sequence was encountered during generation.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.CreateMessageResult.Role">
            <summary>
            Gets or sets the role of the user who generated the message.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.EmptyResult">
            <summary>
            Represents an empty result object for operations that need to indicate successful completion 
            but don't need to return any specific data.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.GetPromptRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> request from a client to get a prompt provided by a server.
            </summary>
            <remarks>
            The server will respond with a <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> containing the resulting prompt.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Name">
            <summary>
            Gets or sets the name of the prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments">
            <summary>
            Gets or sets arguments to use for templating the prompt when retrieving it from the server.
            </summary>
            <remarks>
            Typically, these arguments are used to replace placeholders in prompt templates. The keys in this dictionary
            should match the names defined in the prompt's <see cref="P:ModelContextProtocol.Protocol.Types.Prompt.Arguments"/> list. However, the server may
            choose to use these arguments in any way it deems appropriate to generate the prompt.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.GetPromptResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> request from the client.
            </summary>
            <remarks>
            <para>
            For integration with AI client libraries, <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> can be converted to
            a collection of <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> objects using the <see cref="M:ModelContextProtocol.AIContentExtensions.ToChatMessages(ModelContextProtocol.Protocol.Types.GetPromptResult)"/> extension method.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptResult.Description">
            <summary>
            Gets or sets an optional description for the prompt.
            </summary>
            <remarks>
            <para>
            This description provides contextual information about the prompt's purpose and use cases.
            It helps developers understand what the prompt is designed for and how it should be used.
            </para>
            <para>
            When returned from a server in response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> request,
            this description can be used by client applications to provide context about the prompt or to
            display in user interfaces.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.GetPromptResult.Messages">
            <summary>
            Gets or sets the prompt that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Implementation">
            <summary>
            Provides the name and version of an MCP implementation.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.Implementation"/> class is used to identify MCP clients and servers during the initialization handshake.
            It provides version and name information that can be used for compatibility checks, logging, and debugging.
            </para>
            <para>
            Both clients and servers provide this information during connection establishment.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Implementation.Name">
            <summary>
            Gets or sets the name of the implementation.
            </summary>
            <remarks>
            This is typically the name of the client or server library/application.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Implementation.Version">
            <summary>
            Gets or sets the version of the implementation.
            </summary>
            <remarks>
            The version is used during client-server handshake to identify implementation versions,
            which can be important for troubleshooting compatibility issues or when reporting bugs.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.InitializeRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Initialize"/> request sent by a client to a server during the protocol handshake.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.InitializeRequestParams"/> is the first message sent in the Model Context Protocol
            communication flow. It establishes the connection between client and server, negotiates the protocol
            version, and declares the client's capabilities.
            </para>
            <para>
            After sending this request, the client should wait for an <see cref="T:ModelContextProtocol.Protocol.Types.InitializeResult"/> response
            before sending an <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.InitializedNotification"/> notification to complete the handshake.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.ProtocolVersion">
            <summary>
            Gets or sets the version of the Model Context Protocol that the client wants to use.
            </summary>
            <remarks>
            <para>
            Protocol version is specified using a date-based versioning scheme in the format "YYYY-MM-DD".
            The client and server must agree on a protocol version to communicate successfully.
            </para>
            <para>
            During initialization, the server will check if it supports this requested version. If there's a 
            mismatch, the server will reject the connection with a version mismatch error.
            </para>
            <para>
            See the <see href="https://spec.modelcontextprotocol.io/specification/">protocol specification</see> for version details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.Capabilities">
            <summary>
            Gets or sets the client's capabilities.
            </summary>
            <remarks>
            Capabilities define the features the client supports, such as "sampling" or "roots".
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeRequestParams.ClientInfo">
            <summary>
            Gets or sets information about the client implementation, including its name and version.
            </summary>
            <remarks>
            This information is required during the initialization handshake to identify the client.
            Servers may use this information for logging, debugging, or compatibility checks.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.InitializeResult">
            <summary>
            Represents the result of a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Initialize"/> request sent to the server during connection establishment.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.InitializeResult"/> is sent by the server in response to an <see cref="T:ModelContextProtocol.Protocol.Types.InitializeRequestParams"/> 
            message from the client. It contains information about the server, its capabilities, and the protocol version
            that will be used for the session.
            </para>
            <para>
            After receiving this response, the client should send an <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.InitializedNotification"/>
            notification to complete the handshake.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.ProtocolVersion">
            <summary>
            Gets or sets the version of the Model Context Protocol that the server will use for this session.
            </summary>
            <remarks>
            <para>
            This is the protocol version the server has agreed to use, which should match the client's 
            requested version. If there's a mismatch, the client should throw an exception to prevent 
            communication issues due to incompatible protocol versions.
            </para>
            <para>
            The protocol uses a date-based versioning scheme in the format "YYYY-MM-DD".
            </para>
            <para>
            See the <see href="https://spec.modelcontextprotocol.io/specification/">protocol specification</see> for version details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.Capabilities">
            <summary>
            Gets or sets the server's capabilities.
            </summary>
            <remarks>
            This defines the features the server supports, such as "tools", "prompts", "resources", or "logging", 
            and other protocol-specific functionality.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.ServerInfo">
            <summary>
            Gets or sets information about the server implementation, including its name and version.
            </summary>
            <remarks>
            This information identifies the server during the initialization handshake.
            Clients may use this information for logging, debugging, or compatibility checks.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.InitializeResult.Instructions">
            <summary>
            Gets or sets optional instructions for using the server and its features.
            </summary>
            <remarks>
            <para>
            These instructions provide guidance to clients on how to effectively use the server's capabilities.
            They can include details about available tools, expected input formats, limitations,
            or any other information that helps clients interact with the server properly.
            </para>
            <para>
            Client applications often use these instructions as system messages for LLM interactions
            to provide context about available functionality.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListPromptsRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> request from a client to request
            a list of prompts available from the server.
            </summary>
            <remarks>
            The server responds with a <see cref="T:ModelContextProtocol.Protocol.Types.ListPromptsResult"/> containing the available prompts.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListPromptsResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> request from the client, containing available prompts.
            </summary>
            <remarks>
            <para>
            This result is returned when a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> request to discover available prompts on the server.
            </para>
            <para>
            It inherits from <see cref="T:ModelContextProtocol.Protocol.Messages.PaginatedResult"/>, allowing for paginated responses when there are many prompts.
            The server can provide the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property to indicate there are more
            prompts available beyond what was returned in the current response.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListPromptsResult.Prompts">
            <summary>
            A list of prompts or prompt templates that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourcesRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> request from a client to request
            a list of resources available from the server.
            </summary>
            <remarks>
            The server responds with a <see cref="T:ModelContextProtocol.Protocol.Types.ListResourcesResult"/> containing the available resources.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourcesResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> request from the client, containing available resources.
            </summary>
            <remarks>
            <para>
            This result is returned when a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> request to discover available resources on the server.
            </para>
            <para>
            It inherits from <see cref="T:ModelContextProtocol.Protocol.Messages.PaginatedResult"/>, allowing for paginated responses when there are many resources.
            The server can provide the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property to indicate there are more
            resources available beyond what was returned in the current response.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListResourcesResult.Resources">
            <summary>
            A list of resources that the server offers.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourceTemplatesRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> request from a client to request
            a list of resource templates available from the server.
            </summary>
            <remarks>
            The server responds with a <see cref="T:ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult"/> containing the available resource templates.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> request from the client,
            containing available resource templates.
            </summary>
            <remarks>
            <para>
            This result is returned when a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> request to discover 
            available resource templates on the server.
            </para>
            <para>
            It inherits from <see cref="T:ModelContextProtocol.Protocol.Messages.PaginatedResult"/>, allowing for paginated responses when there are many resource templates.
            The server can provide the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property to indicate there are more
            resource templates available beyond what was returned in the current response.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult.ResourceTemplates">
            <summary>
            Gets or sets a list of resource templates that the server offers.
            </summary>
            <remarks>
            This collection contains all the resource templates returned in the current page of results.
            Each <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> provides metadata about resources available on the server,
            including URI templates, names, descriptions, and MIME types.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListRootsRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> request from a server to request
            a list of roots available from the client.
            </summary>
            <remarks>
            The client responds with a <see cref="T:ModelContextProtocol.Protocol.Types.ListRootsResult"/> containing the client's roots.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListRootsResult">
            <summary>
            Represents a client's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList"/> request from the server,
            containing available roots.
            </summary>
            <remarks>
            <para>
            This result is returned when a server sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList"/> request to discover 
            available roots on the client.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListRootsResult.Meta">
            <summary>
            Gets or sets additional metadata for the result.
            </summary>
            <remarks>
            This property is reserved by the protocol for future use.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListRootsResult.Roots">
            <summary>
            Gets or sets the list of root URIs provided by the client.
            </summary>
            <remarks>
            This collection contains all available root URIs and their associated metadata.
            Each root serves as an entry point for resource navigation in the Model Context Protocol.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListToolsRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList"/> request from a client to request
            a list of tools available from the server.
            </summary>
            <remarks>
            The server responds with a <see cref="T:ModelContextProtocol.Protocol.Types.ListToolsResult"/> containing the available tools.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ListToolsResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList"/> request from the client, containing available tools.
            </summary>
            <remarks>
            <para>
            This result is returned when a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList"/> request to discover available tools on the server.
            </para>
            <para>
            It inherits from <see cref="T:ModelContextProtocol.Protocol.Messages.PaginatedResult"/>, allowing for paginated responses when there are many tools.
            The server can provide the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/> property to indicate there are more
            tools available beyond what was returned in the current response.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ListToolsResult.Tools">
            <summary>
            The server's response to a tools/list request from the client.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingCapability">
            <summary>
            Represents the logging capability configuration for a Model Context Protocol server.
            </summary>
            <remarks>
            This capability allows clients to set the logging level and receive log messages from the server.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingCapability.SetLoggingLevelHandler">
            <summary>
            Gets or sets the handler for set logging level requests from clients.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingLevel">
            <summary>
            Indicates the severity of a log message.
            </summary>
            <remarks>
            These map to syslog message severities, as specified in <see href="https://datatracker.ietf.org/doc/html/rfc5424#section-6.2.1">RFC-5424</see>.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Debug">
            <summary>Detailed debug information, typically only valuable to developers.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Info">
            <summary>Normal operational messages that require no action.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Notice">
            <summary>Normal but significant events that might deserve attention.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Warning">
            <summary>Warning conditions that don't represent an error but indicate potential issues.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Error">
            <summary>Error conditions that should be addressed but don't require immediate action.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Critical">
            <summary>Critical conditions that require immediate attention.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Alert">
            <summary>Action must be taken immediately to address the condition.</summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.LoggingLevel.Emergency">
            <summary>System is unusable and requires immediate attention.</summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.LoggingMessageNotification"/>
            notification sent whenever a log message is generated.
            </summary>
            <remarks>
            <para>
            Logging notifications allow servers to communicate diagnostic information to clients with varying severity levels.
            Clients can filter these messages based on the <see cref="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Level"/> and <see cref="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Logger"/> properties.
            </para>
            <para>
            If no <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel"/> request has been sent from the client, the server may decide which
            messages to send automatically.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Level">
            <summary>
            Gets or sets the severity of this log message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Logger">
            <summary>
            Gets or sets an optional name of the logger issuing this message.
            </summary>
            <remarks>
            <para>
            <see cref="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Logger"/> typically represents a category or component in the server's logging system.
            The logger name is useful for filtering and routing log messages in client applications.
            </para>
            <para>
            When implementing custom servers, choose clear, hierarchical logger names to help
            clients understand the source of log messages.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.LoggingMessageNotificationParams.Data">
            <summary>
            Gets or sets the data to be logged, such as a string message.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ModelHint">
            <summary>
            Provides hints to use for model selection.
            </summary>
            <remarks>
            <para>
            When multiple hints are specified in <see cref="P:ModelContextProtocol.Protocol.Types.ModelPreferences.Hints"/>, they are evaluated in order,
            with the first match taking precedence. Clients should prioritize these hints over numeric priorities.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelHint.Name">
            <summary>
            Gets or sets a hint for a model name.
            </summary>
            <remarks>
            The specified string can be a partial or full model name. Clients may also 
            map hints to equivalent models from different providers. Clients make the final model
            selection based on these preferences and their available models.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ModelPreferences">
            <summary>
            Represents a server's preferences for model selection, requested of the client during sampling.
            </summary>
            <remarks>
            <para>
            Because LLMs can vary along multiple dimensions, choosing the "best" model is
            rarely straightforward.  Different models excel in different areas—some are
            faster but less capable, others are more capable but more expensive, and so
            on. This class allows servers to express their priorities across multiple
            dimensions to help clients make an appropriate selection for their use case.
            </para>
            <para>
            These preferences are always advisory. The client may ignore them. It is also
            up to the client to decide how to interpret these preferences and how to
            balance them against other considerations.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.CostPriority">
            <summary>
            Gets or sets how much to prioritize cost when selecting a model.
            </summary>
            <remarks>
            A value of 0 means cost is not important, while a value of 1 means cost is the most important factor.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.Hints">
            <summary>
            Gets or sets optional hints to use for model selection.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.SpeedPriority">
            <summary>
            Gets or sets how much to prioritize sampling speed (latency) when selecting a model.
            </summary>
            <remarks>
            A value of 0 means speed is not important, while a value of 1 means speed is the most important factor.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ModelPreferences.IntelligencePriority">
            <summary>
            Gets or sets how much to prioritize intelligence and capabilities when selecting a model.
            </summary>
            <remarks>
            A value of 0 means intelligence is not important, while a value of 1 means intelligence is the most important factor.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PaginatedRequestParams">
            <summary>
            Provides a base class for paginated requests.
            </summary>
            <remarks>
            <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/2024-11-05/schema.json">See the schema for details</see>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PaginatedRequestParams.Cursor">
            <summary>
            Gets or sets an opaque token representing the current pagination position.
            </summary>
            <remarks>
            If provided, the server should return results starting after this cursor.
            This value should be obtained from the <see cref="P:ModelContextProtocol.Protocol.Messages.PaginatedResult.NextCursor"/>
            property of a previous request's response.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PingResult">
            <summary>
            Represents the result of a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Ping"/> request in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.PingResult"/> is returned in response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.Ping"/> request, 
            which is used to verify that the connection between client and server is still alive and responsive. 
            Since this is a simple connectivity check, the result is an empty object containing no data.
            </para>
            <para>
            Ping requests can be initiated by either the client or the server to check if the other party
            is still responsive.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Prompt">
            <summary>
            Represents a prompt that the server offers.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Arguments">
            <summary>
            Gets or sets a list of arguments that this prompt accepts for templating and customization.
            </summary>
            <remarks>
            <para>
            This list defines the arguments that can be provided when requesting the prompt.
            Each argument specifies metadata like name, description, and whether it's required.
            </para>
            <para>
            When a client makes a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> request, it can provide values for these arguments
            which will be substituted into the prompt template or otherwise used to render the prompt.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Description">
            <summary>
            Gets or sets an optional description of what this prompt provides.
            </summary>
            <remarks>
            <para>
            This description helps developers understand the purpose and use cases for the prompt.
            It should explain what the prompt is designed to accomplish and any important context.
            </para>
            <para>
            The description is typically used in documentation, UI displays, and for providing context
            to client applications that may need to choose between multiple available prompts.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Prompt.Name">
            <summary>
            Gets or sets the name of the prompt.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptArgument">
            <summary>
            Represents an argument that a prompt can accept for templating and customization.
            </summary>
            <remarks>
            <para>
            The <see cref="T:ModelContextProtocol.Protocol.Types.PromptArgument"/> class defines metadata for arguments that can be provided
            to a prompt. These arguments are used to customize or parameterize prompts when they are 
            retrieved using <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> requests.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Name">
            <summary>
            Gets or sets the name of the argument used for referencing in prompt templates.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Description">
            <summary>
            Gets or sets a human-readable description of the argument's purpose and expected values.
            </summary>
            <remarks>
            This description helps developers understand what information should be provided
            for this argument and how it will affect the generated prompt.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptArgument.Required">
            <summary>
            Gets or sets an indication as to whether this argument must be provided when requesting the prompt.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the client must include this argument when making a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> request.
            If a required argument is missing, the server should respond with an error.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptMessage">
            <summary>
            Represents a message within the Model Context Protocol (MCP) system, used for communication between clients and AI models.
            </summary>
            <remarks>
            <para>
            A <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> encapsulates content sent to or received from AI models in the Model Context Protocol.
            Each message has a specific role (<see cref="F:ModelContextProtocol.Protocol.Types.Role.User"/> or <see cref="F:ModelContextProtocol.Protocol.Types.Role.Assistant"/>) and contains content which can be
            text, images, audio, or embedded resources.
            </para>
            <para>
            This class is similar to <see cref="T:ModelContextProtocol.Protocol.Types.SamplingMessage"/>, but with enhanced support for embedding resources from the MCP server.
            It serves as a core data structure in the MCP message exchange flow, particularly in prompt formation and model responses.
            </para>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> objects are typically used in collections within <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> 
            to represent complete conversations or prompt sequences. They can be converted to and from <see cref="T:Microsoft.Extensions.AI.ChatMessage"/>
            objects using the extension methods <see cref="M:ModelContextProtocol.AIContentExtensions.ToChatMessage(ModelContextProtocol.Protocol.Types.PromptMessage)"/> and
            <see cref="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptMessage.Content">
            <summary>
            Gets or sets the content of the message, which can be text, image, audio, or an embedded resource.
            </summary>
            <remarks>
            The <see cref="P:ModelContextProtocol.Protocol.Types.PromptMessage.Content"/> object contains all the message payload, whether it's simple text,
            base64-encoded binary data (for images/audio), or a reference to an embedded resource.
            The <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> property indicates the specific content type.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptMessage.Role">
            <summary>
            Gets or sets the role of the message sender, specifying whether it's from a "user" or an "assistant".
            </summary>
            <remarks>
            In the Model Context Protocol, each message must have a clear role assignment to maintain
            the conversation flow. User messages represent queries or inputs from users, while assistant
            messages represent responses generated by AI models.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.PromptsCapability">
            <summary>
            Represents the server's capability to provide predefined prompt templates that clients can use.
            </summary>
            <remarks>
            <para>
            The prompts capability allows a server to expose a collection of predefined prompt templates that clients
            can discover and use. These prompts can be static (defined in the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/>) or
            dynamically generated through handlers.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListChanged">
            <summary>
            Gets or sets whether this server supports notifications for changes to the prompt list.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the server will send notifications using 
            <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.PromptListChangedNotification"/> when prompts are added, 
            removed, or modified. Clients can register handlers for these notifications to
            refresh their prompt cache. This capability enables clients to stay synchronized with server-side changes 
            to available prompts.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client requests a list of available prompts from the server
            via a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> request. Results from this handler are returned
            along with any prompts defined in <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/>.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> requests.
            </summary>
            <remarks>
            <para>
            This handler is invoked when a client requests details for a specific prompt by name and provides arguments 
            for the prompt if needed. The handler receives the request context containing the prompt name and any arguments, 
            and should return a <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> with the prompt messages and other details.
            </para>
            <para>
            This handler will be invoked if the requested prompt name is not found in the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/>,
            allowing for dynamic prompt generation or retrieval from external sources.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection">
            <summary>
            Gets or sets a collection of prompts that will be served by the server.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.PromptCollection"/> contains the predefined prompts that clients can request from the server.
            This collection works in conjunction with <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler"/> and <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler"/>
            when those are provided:
            </para>
            <para>
            - For <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> requests: The server returns all prompts from this collection 
              plus any additional prompts provided by the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.ListPromptsHandler"/> if it's set.
            </para>
            <para>
            - For <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> requests: The server first checks this collection for the requested prompt.
              If not found, it will invoke the <see cref="P:ModelContextProtocol.Protocol.Types.PromptsCapability.GetPromptHandler"/> as a fallback if one is set.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ReadResourceRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead"/> request from a client to get a resource provided by a server.
            </summary>
            <remarks>
            The server will respond with a <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/> containing the resulting resource data.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ReadResourceRequestParams.Uri">
            <summary>
            The URI of the resource to read. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ReadResourceResult">
            <summary>
            Represents a server's response to a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead"/> request from the client.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ReadResourceResult.Contents">
            <summary>
            Gets or sets a list of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> objects that this resource contains.
            </summary>
            <remarks>
            This property contains the actual content of the requested resource, which can be
            either text-based (<see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>) or binary (<see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/>).
            The type of content included depends on the resource being accessed.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Reference">
            <summary>
            Represents a reference to a resource or prompt in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            A Reference object identifies either a resource or a prompt:
            </para>
            <list type="bullet">
              <item><description>For resource references, set <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Type"/> to "ref/resource" and provide the <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Uri"/> property.</description></item>
              <item><description>For prompt references, set <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Type"/> to "ref/prompt" and provide the <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Name"/> property.</description></item>
            </list>
            <para>
            References are commonly used with <see cref="M:ModelContextProtocol.Client.McpClientExtensions.CompleteAsync(ModelContextProtocol.Client.IMcpClient,ModelContextProtocol.Protocol.Types.Reference,System.String,System.String,System.Threading.CancellationToken)"/> to request completion suggestions for arguments,
            and with other methods that need to reference resources or prompts.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Type">
            <summary>
            Gets or sets the type of content.
            </summary>
            <remarks>
            This can be "ref/resource" or "ref/prompt".
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Uri">
            <summary>
            Gets or sets the URI or URI template of the resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Reference.Name">
            <summary>
            Gets or sets the name of the prompt or prompt template.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.Reference.ToString">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.Reference.Validate(System.String@)">
            <summary>
            Validates the reference object to ensure it contains the required properties for its type.
            </summary>
            <param name="validationMessage">When this method returns false, contains a message explaining why validation failed; otherwise, null.</param>
            <returns>True if the reference is valid; otherwise, false.</returns>
            <remarks>
            For "ref/resource" type, the <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Uri"/> property must not be null or empty.
            For "ref/prompt" type, the <see cref="P:ModelContextProtocol.Protocol.Types.Reference.Name"/> property must not be null or empty.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RequestParams">
            <summary>
            Provides a base class for all request parameters.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RequestParams.Meta">
            <summary>
            Gets or sets metadata related to the request that provides additional protocol-level information.
            </summary>
            <remarks>
            This can include progress tracking tokens and other protocol-specific properties
            that are not part of the primary request parameters.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RequestParamsMetadata">
            <summary>
            Provides metadata related to the request that provides additional protocol-level information.
            </summary>
            <remarks>
            This class contains properties that are used by the Model Context Protocol
            for features like progress tracking and other protocol-specific capabilities.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RequestParamsMetadata.ProgressToken">
            <summary>
            Gets or sets an opaque token that will be attached to any subsequent progress notifications.
            </summary>
            <remarks>
            The receiver is not obligated to provide these notifications.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Resource">
            <summary>
            Represents a known resource that the server is capable of reading.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Uri">
            <summary>
            Gets or sets the URI of this resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Name">
            <summary>
            Gets or sets a human-readable name for this resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Description">
            <summary>
            Gets or sets a description of what this resource represents.
            </summary>
            <remarks>
            <para>
            This can be used by clients to improve the LLM's understanding of available resources. It can be thought of like a \"hint\" to the model.
            </para>
            <para>
            The description should provide clear context about the resource's content, format, and purpose.
            This helps AI models make better decisions about when to access or reference the resource.
            </para>
            <para>
            Client applications can also use this description for display purposes in user interfaces
            or to help users understand the available resources.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.MimeType">
            <summary>
            Gets or sets the MIME type of this resource.
            </summary>
            <remarks>
            <para>
            <see cref="P:ModelContextProtocol.Protocol.Types.Resource.MimeType"/> specifies the format of the resource content, helping clients to properly interpret and display the data.
            Common MIME types include "text/plain" for plain text, "application/pdf" for PDF documents,
            "image/png" for PNG images, and "application/json" for JSON data.
            </para>
            <para>
            This property may be <see langword="null"/> if the MIME type is unknown or not applicable for the resource.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Size">
            <summary>
            Gets or sets the size of the raw resource content (before base64 encoding), in bytes, if known.
            </summary>
            <remarks>
            This can be used by applications to display file sizes and estimate context window usage.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Resource.Annotations">
            <summary>
            Gets or sets optional annotations for the resource.
            </summary>
            <remarks>
            These annotations can be used to specify the intended audience (<see cref="F:ModelContextProtocol.Protocol.Types.Role.User"/>, <see cref="F:ModelContextProtocol.Protocol.Types.Role.Assistant"/>, or both)
            and the priority level of the resource. Clients can use this information to filter or prioritize resources for different roles.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceContents">
            <summary>
            Provides a base class representing contents of a resource in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/> serves as the base class for different types of resources that can be 
            exchanged through the Model Context Protocol. Resources are identified by URIs and can contain
            different types of data.
            </para>
            <para>
            This class is abstract and has two concrete implementations:
            <list type="bullet">
              <item><description><see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/> - For text-based resources</description></item>
              <item><description><see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/> - For binary data resources</description></item>
            </list>
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceContents.Uri">
            <summary>
            Gets or sets the URI of the resource.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceContents.MimeType">
            <summary>
            Gets or sets the MIME type of the resource content.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceContents.Converter">
            <summary>
            Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ResourceContents.Converter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ResourceContents.Converter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Types.ResourceContents,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourcesCapability">
            <summary>
            Represents the resources capability configuration.
            </summary>
            <remarks>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.Subscribe">
            <summary>
            Gets or sets whether this server supports subscribing to resource updates.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListChanged">
            <summary>
            Gets or sets whether this server supports notifications for changes to the resource list.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the server will send notifications using 
            <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceListChangedNotification"/> when resources are added, 
            removed, or modified. Clients can register handlers for these notifications to
            refresh their resource cache.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourceTemplatesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> requests.
            </summary>
            <remarks>
            This handler is called when clients request available resource templates that can be used
            to create resources within the Model Context Protocol server.
            Resource templates define the structure and URI patterns for resources accessible in the system,
            allowing clients to discover available resource types and their access patterns.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> requests.
            </summary>
            <remarks>
            This handler responds to client requests for available resources and returns information about resources accessible through the server.
            The implementation should return a <see cref="T:ModelContextProtocol.Protocol.Types.ListResourcesResult"/> with the matching resources.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ReadResourceHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead"/> requests.
            </summary>
            <remarks>
            This handler is responsible for retrieving the content of a specific resource identified by its URI in the Model Context Protocol.
            When a client sends a resources/read request, this handler is invoked with the resource URI.
            The handler should implement logic to locate and retrieve the requested resource, then return
            its contents in a ReadResourceResult object.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.SubscribeToResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe"/> requests.
            </summary>
            <remarks>
            When a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe"/> request, this handler is invoked with the resource URI
            to be subscribed to. The implementation should register the client's interest in receiving updates
            for the specified resource.
            Subscriptions allow clients to receive real-time notifications when resources change, without
            requiring polling.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.UnsubscribeFromResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesUnsubscribe"/> requests.
            </summary>
            <remarks>
            When a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesUnsubscribe"/> request, this handler is invoked with the resource URI
            to be unsubscribed from. The implementation should remove the client's registration for receiving updates
            about the specified resource.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ResourceCollection">
            <summary>
            Gets or sets a collection of resources served by the server.
            </summary>
            <remarks>
            <para>
            Resources specified via <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ResourceCollection"/> augment the <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourcesHandler"/>, <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ListResourceTemplatesHandler"/>
            and <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ReadResourceHandler"/> handlers, if provided. Resources with template expressions in their URI templates are considered resource templates
            and are listed via ListResourceTemplate, whereas resources without template parameters are considered static resources and are listed with ListResources.
            </para>
            <para>
            ReadResource requests will first check the <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ResourceCollection"/> for the exact resource being requested. If no match is found, they'll proceed to
            try to match the resource against each resource template in <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ResourceCollection"/>. If no match is still found, the request will fall back to
            any handler registered for <see cref="P:ModelContextProtocol.Protocol.Types.ResourcesCapability.ReadResourceHandler"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceTemplate">
            <summary>
            Represents a known resource template that the server is capable of reading.
            </summary>
            <remarks>
            Resource templates provide metadata about resources available on the server,
            including how to construct URIs for those resources.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.UriTemplate">
            <summary>
            Gets or sets the URI template (according to RFC 6570) that can be used to construct resource URIs.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Name">
            <summary>
            Gets or sets a human-readable name for this resource template.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Description">
            <summary>
            Gets or sets a description of what this resource template represents.
            </summary>
            <remarks>
            <para>
            This description helps clients understand the purpose and content of resources
            that can be generated from this template. It can be used by client applications
            to provide context about available resource types or to display in user interfaces.
            </para>
            <para>
            For AI models, this description can serve as a hint about when and how to use
            the resource template, enhancing the model's ability to generate appropriate URIs.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.MimeType">
            <summary>
            Gets or sets the MIME type of this resource template, if known.
            </summary>
            <remarks>
            <para>
            Specifies the expected format of resources that can be generated from this template.
            This helps clients understand what type of content to expect when accessing resources
            created using this template.
            </para>
            <para>
            Common MIME types include "text/plain" for plain text, "application/pdf" for PDF documents,
            "image/png" for PNG images, or "application/json" for JSON data.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.Annotations">
            <summary>
            Gets or sets optional annotations for the resource template.
            </summary>
            <remarks>
            These annotations can be used to specify the intended audience (<see cref="F:ModelContextProtocol.Protocol.Types.Role.User"/>, <see cref="F:ModelContextProtocol.Protocol.Types.Role.Assistant"/>, or both)
            and the priority level of the resource template. Clients can use this information to filter
            or prioritize resource templates for different roles.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.IsTemplated">
            <summary>Gets whether <see cref="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.UriTemplate"/> contains any template expressions.</summary>
        </member>
        <member name="M:ModelContextProtocol.Protocol.Types.ResourceTemplate.AsResource">
            <summary>Converts the <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> into a <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/>.</summary>
            <returns>A <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> if <see cref="P:ModelContextProtocol.Protocol.Types.ResourceTemplate.IsTemplated"/> is <see langword="false"/>; otherwise, <see langword="null"/>.</returns>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ResourceUpdatedNotificationParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ResourceUpdatedNotification"/>
            notification sent whenever a subscribed resource changes.
            </summary>
            <remarks>
            <para>
            When a client subscribes to resource updates using <see cref="T:ModelContextProtocol.Protocol.Types.SubscribeRequestParams"/>, the server will
            send notifications with this payload whenever the subscribed resource is modified. These notifications
            allow clients to maintain synchronized state without needing to poll the server for changes.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ResourceUpdatedNotificationParams.Uri">
            <summary>
            Gets or sets the URI of the resource that was updated.
            </summary>
            <remarks>
            The URI can use any protocol; it is up to the server how to interpret it.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Role">
            <summary>
            Represents the type of role in the Model Context Protocol conversation.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.Role.User">
            <summary>
            Corresponds to a human user in the conversation.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Protocol.Types.Role.Assistant">
            <summary>
            Corresponds to the AI assistant in the conversation.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Root">
            <summary>
            Represents a root URI and its metadata in the Model Context Protocol.
            </summary>
            <remarks>
            Root URIs serve as entry points for resource navigation, typically representing
            top-level directories or container resources that can be accessed and traversed.
            Roots provide a hierarchical structure for organizing and accessing resources within the protocol.
            Each root has a URI that uniquely identifies it and optional metadata like a human-readable name.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Uri">
            <summary>
            Gets or sets the URI of the root.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Name">
            <summary>
            Gets or sets a human-readable name for the root.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Root.Meta">
            <summary>
            Gets or sets additional metadata for the root.
            </summary>
            <remarks>
            This is reserved by the protocol for future use.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.RootsCapability">
            <summary>
            Represents a client capability that enables root resource discovery in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            When present in <see cref="T:ModelContextProtocol.Protocol.Types.ClientCapabilities"/>, it indicates that the client supports listing
            root URIs that serve as entry points for resource navigation.
            </para>
            <para>
            The roots capability establishes a mechanism for servers to discover and access the hierarchical 
            structure of resources provided by a client. Root URIs represent top-level entry points from which
            servers can navigate to access specific resources.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RootsCapability.ListChanged">
            <summary>
            Gets or sets whether the client supports notifications for changes to the roots list.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the client can notify servers when roots are added, 
            removed, or modified, allowing servers to refresh their roots cache accordingly.
            This enables servers to stay synchronized with client-side changes to available roots.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.RootsCapability.RootsHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client sends a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.RootsList"/> request to retrieve available roots.
            The handler receives request parameters and should return a <see cref="T:ModelContextProtocol.Protocol.Types.ListRootsResult"/> containing the collection of available roots.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SamplingCapability">
            <summary>
            Represents the capability for a client to generate text or other content using an AI model.
            </summary>
            <remarks>
            <para>
            This capability enables the MCP client to respond to sampling requests from an MCP server.
            </para>
            <para>
            When this capability is enabled, an MCP server can request the client to generate content
            using an AI model. The client must set a <see cref="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler"/> to process these requests.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingCapability.SamplingHandler">
            <summary>
            Gets or sets the handler for processing <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.SamplingCreateMessage"/> requests.
            </summary>
            <remarks>
            <para>
            This handler function is called when an MCP server requests the client to generate content
            using an AI model. The client must set this property for the sampling capability to work.
            </para>
            <para>
            The handler receives message parameters, a progress reporter for updates, and a 
            cancellation token. It should return a <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageResult"/> containing the 
            generated content.
            </para>
            <para>
            You can create a handler using the <see cref="M:ModelContextProtocol.Client.McpClientExtensions.CreateSamplingHandler(Microsoft.Extensions.AI.IChatClient)"/> extension
            method with any implementation of <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SamplingMessage">
            <summary>
            Represents a message issued to or received from an LLM API within the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            A <see cref="T:ModelContextProtocol.Protocol.Types.SamplingMessage"/> encapsulates content sent to or received from AI models in the Model Context Protocol.
            Each message has a specific role (<see cref="F:ModelContextProtocol.Protocol.Types.Role.User"/> or <see cref="F:ModelContextProtocol.Protocol.Types.Role.Assistant"/>) and contains content which can be text or images.
            </para>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.SamplingMessage"/> objects are typically used in collections within <see cref="T:ModelContextProtocol.Protocol.Types.CreateMessageRequestParams"/>
            to represent prompts or queries for LLM sampling. They form the core data structure for text generation requests
            within the Model Context Protocol.
            </para>
            <para>
            While similar to <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/>, the <see cref="T:ModelContextProtocol.Protocol.Types.SamplingMessage"/> is focused on direct LLM sampling
            operations rather than the enhanced resource embedding capabilities provided by <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/>.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingMessage.Content">
            <summary>
            Gets or sets the content of the message.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SamplingMessage.Role">
            <summary>
            Gets or sets the role of the message sender, indicating whether it's from a "user" or an "assistant".
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ServerCapabilities">
            <summary>
            Represents the capabilities that a server may support.
            </summary>
            <remarks>
            <para>
            Server capabilities define the features and functionality available when clients connect.
            These capabilities are advertised to clients during the initialize handshake.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Experimental">
            <summary>
            Gets or sets experimental, non-standard capabilities that the server supports.
            </summary>
            <remarks>
            <para>
            The <see cref="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Experimental"/> dictionary allows servers to advertise support for features that are not yet 
            standardized in the Model Context Protocol specification. This extension mechanism enables 
            future protocol enhancements while maintaining backward compatibility.
            </para>
            <para>
            Values in this dictionary are implementation-specific and should be coordinated between client 
            and server implementations. Clients should not assume the presence of any experimental capability 
            without checking for it first.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Logging">
            <summary>
            Gets or sets a server's logging capability, supporting sending log messages to the client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Prompts">
            <summary>
            Gets or sets a server's prompts capability for serving predefined prompt templates that clients can discover and use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Resources">
            <summary>
            Gets or sets a server's resources capability for serving predefined resources that clients can discover and use.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Tools">
            <summary>
            Gets or sets a server's tools capability for listing tools that a client is able to invoke.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.Completions">
            <summary>
            Gets or sets a server's completions capability for supporting argument auto-completion suggestions.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.NotificationHandlers">
            <summary>Gets or sets notification handlers to register with the server.</summary>
            <remarks>
            <para>
            When constructed, the server will enumerate these handlers once, which may contain multiple handlers per notification method key.
            The server will not re-enumerate the sequence after initialization.
            </para>
            <para>
            Notification handlers allow the server to respond to client-sent notifications for specific methods.
            Each key in the collection is a notification method name, and each value is a callback that will be invoked
            when a notification with that method is received.
            </para>
            <para>
            Handlers provided via <see cref="P:ModelContextProtocol.Protocol.Types.ServerCapabilities.NotificationHandlers"/> will be registered with the server for the lifetime of the server.
            For transient handlers, <see cref="M:ModelContextProtocol.IMcpEndpoint.RegisterNotificationHandler(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask})"/> may be used to register a handler that can
            then be unregistered by disposing of the <see cref="T:System.IAsyncDisposable"/> returned from the method.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SetLevelRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel"/> request from a client
            to enable or adjust logging.
            </summary>
            <remarks>
            This request allows clients to configure the level of logging information they want to receive from the server.
            The server will send notifications for log events at the specified level and all higher (more severe) levels.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SetLevelRequestParams.Level">
            <summary>
            Gets or sets the level of logging that the client wants to receive from the server. 
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.SubscribeRequestParams">
            <summary>
            Represents the parameters used with a <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe"/> request from a client
            to request real-time notifications from the server whenever a particular resource changes.
            </summary>
            <remarks>
            <para>
            The subscription mechanism allows clients to be notified about changes to specific resources
            identified by their URI. When a subscribed resource changes, the server sends a notification
            to the client with the updated resource information.
            </para>
            <para>
            Subscriptions remain active until explicitly canceled using <see cref="T:ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams"/>
            or until the connection is terminated.
            </para>
            <para>
            The server may refuse or limit subscriptions based on its capabilities or resource constraints.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.SubscribeRequestParams.Uri">
            <summary>
            Gets or sets the URI of the resource to subscribe to.
            </summary>
            <remarks>
            The URI can use any protocol; it is up to the server how to interpret it.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.TextResourceContents">
            <summary>
            Represents text-based contents of a resource in the Model Context Protocol.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/> is used when textual data needs to be exchanged through
            the Model Context Protocol. The text is stored directly in the <see cref="P:ModelContextProtocol.Protocol.Types.TextResourceContents.Text"/> property.
            </para>
            <para>
            This class inherits from <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>, which also has a sibling implementation
            <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/> for binary resources. When working with resources, the
            appropriate type is chosen based on the nature of the content.
            </para>
            <para>
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for more details.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.TextResourceContents.Text">
            <summary>
            Gets or sets the text of the item.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.Tool">
            <summary>
            Represents a tool that the server is capable of calling.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Name">
            <summary>
            Gets or sets the name of the tool.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Description">
            <summary>
            Gets or sets a human-readable description of the tool.
            </summary>
            <remarks>
            <para>
            This description helps the AI model understand what the tool does and when to use it.
            It should be clear, concise, and accurately describe the tool's purpose and functionality.
            </para>
            <para>
            The description is typically presented to AI models to help them determine when
            and how to use the tool based on user requests.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.InputSchema">
            <summary>
            Gets or sets a JSON Schema object defining the expected parameters for the tool.
            </summary>
            <remarks>
            <para>
            The schema must be a valid JSON Schema object with the "type" property set to "object".
            This is enforced by validation in the setter which will throw an <see cref="T:System.ArgumentException"/>
            if an invalid schema is provided.
            </para>
            <para>
            The schema typically defines the properties (parameters) that the tool accepts, 
            their types, and which ones are required. This helps AI models understand
            how to structure their calls to the tool.
            </para>
            <para>
            If not explicitly set, a default minimal schema of <c>{"type":"object"}</c> is used.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.Tool.Annotations">
            <summary>
            Gets or sets optional additional tool information and behavior hints.
            </summary>
            <remarks>
            These annotations provide metadata about the tool's behavior, such as whether it's read-only,
            destructive, idempotent, or operates in an open world. They also can include a human-readable title.
            Note that these are hints and should not be relied upon for security decisions.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ToolAnnotations">
            <summary>
            Represents additional properties describing a <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/> to clients.
            </summary>
            <remarks>
            All properties in <see cref="T:ModelContextProtocol.Protocol.Types.ToolAnnotations"/> are hints.
            They are not guaranteed to provide a faithful description of tool behavior (including descriptive properties like `title`).
            Clients should never make tool use decisions based on <see cref="T:ModelContextProtocol.Protocol.Types.ToolAnnotations"/> received from untrusted servers.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.Title">
            <summary>
            Gets or sets a human-readable title for the tool that can be displayed to users.
            </summary>
            <remarks>
            <para>
            The title provides a more descriptive, user-friendly name for the tool than the tool's
            programmatic name. It is intended for display purposes and to help users understand
            the tool's purpose at a glance.
            </para>
            <para>
            Unlike the tool name (which follows programmatic naming conventions), the title can
            include spaces, special characters, and be phrased in a more natural language style.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.DestructiveHint">
            <summary>
            Gets or sets whether the tool may perform destructive updates to its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may perform destructive updates to its environment.
            If <see langword="false"/>, the tool performs only additive updates.
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.IdempotentHint">
            <summary>
            Gets or sets whether calling the tool repeatedly with the same arguments 
            will have no additional effect on its environment.
            </summary>
            <remarks>
            <para>
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.OpenWorldHint">
            <summary>
            Gets or sets whether this tool may interact with an "open world" of external entities.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may interact with an unpredictable or dynamic set of entities (like web search).
            If <see langword="false"/>, the tool's domain of interaction is closed and well-defined (like memory access).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolAnnotations.ReadOnlyHint">
            <summary>
            Gets or sets whether this tool does not modify its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool only performs read operations without changing state.
            If <see langword="false"/>, the tool may make modifications to its environment.
            </para>
            <para>
            Read-only tools do not have side effects beyond computational resource usage.
            They don't create, update, or delete data in any system.
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.ToolsCapability">
            <summary>
            Represents the tools capability configuration.
            See the <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">schema</see> for details.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListChanged">
            <summary>
            Gets or sets whether this server supports notifications for changes to the tool list.
            </summary>
            <remarks>
            When set to <see langword="true"/>, the server will send notifications using 
            <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ToolListChangedNotification"/> when tools are added, 
            removed, or modified. Clients can register handlers for these notifications to
            refresh their tool cache. This capability enables clients to stay synchronized with server-side 
            changes to available tools.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList"/> requests.
            </summary>
            <remarks>
            The handler should return a list of available tools when requested by a client.
            It supports pagination through the cursor mechanism, where the client can make
            repeated calls with the cursor returned by the previous call to retrieve more tools.
            When used in conjunction with <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/>, both the tools from this handler
            and the tools from the collection will be combined to form the complete list of available tools.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client makes a call to a tool that isn't found in the <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/>.
            The handler should implement logic to execute the requested tool and return appropriate results. 
            It receives a <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> containing information about the tool 
            being called and its arguments, and should return a <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> with the execution results.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection">
            <summary>
            Gets or sets a collection of tools served by the server.
            </summary>
            <remarks>
            Tools will specified via <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> augment the <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler"/> and
            <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler"/>, if provided. ListTools requests will output information about every tool
            in <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> and then also any tools output by <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ListToolsHandler"/>, if it's
            non-<see langword="null"/>. CallTool requests will first check <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/> for the tool
            being requested, and if the tool is not found in the <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.ToolCollection"/>, any specified <see cref="P:ModelContextProtocol.Protocol.Types.ToolsCapability.CallToolHandler"/>
            will be invoked as a fallback.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams">
            <summary>
            Sent from the client to cancel resource update notifications from the server for a specific resource.
            </summary>
            <remarks>
            <para>
            After a client has subscribed to resource updates using <see cref="T:ModelContextProtocol.Protocol.Types.SubscribeRequestParams"/>, 
            this message can be sent to stop receiving notifications for a specific resource. 
            This is useful for conserving resources and network bandwidth when 
            the client no longer needs to track changes to a particular resource.
            </para>
            <para>
            The unsubscribe operation is idempotent, meaning it can be called multiple times 
            for the same resource without causing errors, even if there is no active subscription.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams.Uri">
            <summary>
            The URI of the resource to unsubscribe from. The URI can use any protocol; it is up to the server how to interpret it.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.AIFunctionMcpServerPrompt">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that's implemented via an <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Delegate,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that wraps the specified <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction">
            <summary>Gets the <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.AIFunction"/> wrapped by this prompt.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.#ctor(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Protocol.Types.Prompt)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> class.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.ProtocolPrompt">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.AIFunctionMcpServerResource">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.AIFunctionMcpServerResource"/> that's implemented via an <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.AIFunction"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.Create(System.Delegate,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.AIFunctionMcpServerResource"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> that wraps the specified <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.AIFunction"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.DeriveUriTemplate(System.String,Microsoft.Extensions.AI.AIFunction)">
            <summary>Derives a name to be used as a resource name.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.AIFunction">
            <summary>Gets the <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.AIFunction"/> wrapped by this resource.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.#ctor(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Protocol.Types.ResourceTemplate)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> class.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.ProtocolResourceTemplate">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerResource.ProtocolResource">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerResource.ReadAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.AIFunctionMcpServerTool">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that's implemented via an <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/>.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Delegate,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Reflection.MethodInfo"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that wraps the specified <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/>.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction">
            <summary>Gets the <see cref="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.AIFunction"/> wrapped by this tool.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.#ctor(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Protocol.Types.Tool)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> class.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.AIFunctionMcpServerTool.ProtocolTool">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.AIFunctionMcpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.DelegatingMcpServerPrompt">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that delegates all operations to an inner <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</summary>
            <remarks>
            This is recommended as a base type when building prompts that can be chained around an underlying <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            The default implementation simply passes each call to the inner prompt instance.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.#ctor(ModelContextProtocol.Server.McpServerPrompt)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.DelegatingMcpServerPrompt"/> class around the specified <paramref name="innerPrompt"/>.</summary>
            <param name="innerPrompt">The inner prompt wrapped by this delegating prompt.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerPrompt.ProtocolPrompt">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.DelegatingMcpServerResource">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> that delegates all operations to an inner <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.</summary>
            <remarks>
            This is recommended as a base type when building resources that can be chained around an underlying <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            The default implementation simply passes each call to the inner resource instance.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerResource.#ctor(ModelContextProtocol.Server.McpServerResource)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.DelegatingMcpServerResource"/> class around the specified <paramref name="innerResource"/>.</summary>
            <param name="innerResource">The inner resource wrapped by this delegating resource.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerResource.ProtocolResource">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerResource.ProtocolResourceTemplate">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerResource.ReadAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerResource.ToString">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.DelegatingMcpServerTool">
            <summary>Provides an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that delegates all operations to an inner <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</summary>
            <remarks>
            This is recommended as a base type when building tools that can be chained around an underlying <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            The default implementation simply passes each call to the inner tool instance.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.#ctor(ModelContextProtocol.Server.McpServerTool)">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.DelegatingMcpServerTool"/> class around the specified <paramref name="innerTool"/>.</summary>
            <param name="innerTool">The inner tool wrapped by this delegating tool.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.DelegatingMcpServerTool.ProtocolTool">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.DelegatingMcpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.IMcpServer">
            <summary>
            Represents an instance of a Model Context Protocol (MCP) server that connects to and communicates with an MCP client.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ClientCapabilities">
            <summary>
            Gets the capabilities supported by the client.
            </summary>
            <remarks>
            <para>
            These capabilities are established during the initialization handshake and indicate
            which features the client supports, such as sampling, roots, and other
            protocol-specific functionality.
            </para>
            <para>
            Server implementations can check these capabilities to determine which features
            are available when interacting with the client.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ClientInfo">
            <summary>
            Gets the version and implementation information of the connected client.
            </summary>
            <remarks>
            <para>
            This property contains identification information about the client that has connected to this server,
            including its name and version. This information is provided by the client during initialization.
            </para>
            <para>
            Server implementations can use this information for logging, tracking client versions, 
            or implementing client-specific behaviors.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.ServerOptions">
            <summary>
            Gets the options used to construct this server.
            </summary>
            <remarks>
            These options define the server's capabilities, protocol version, and other configuration
            settings that were used to initialize the server.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.Services">
            <summary>
            Gets the service provider for the server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServer.LoggingLevel">
            <summary>Gets the last logging level set by the client, or <see langword="null"/> if it's never been set.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.IMcpServer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the server, listening for and handling client requests.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.IMcpServerPrimitive">
            <summary>
            Represents an MCP server primitive, like a tool or a prompt.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.IMcpServerPrimitive.Id">
            <summary>Gets the unique identifier of the primitive.</summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServer">
            <inheritdoc />
        </member>
        <member name="F:ModelContextProtocol.Server.McpServer._loggingLevel">
            <summary>Holds a boxed <see cref="P:ModelContextProtocol.Server.McpServer.LoggingLevel"/> value for the server.</summary>
            <remarks>
            Initialized to non-null the first time SetLevel is used. This is stored as a strong box
            rather than a nullable to be able to manipulate it atomically.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServer.#ctor(ModelContextProtocol.Protocol.Transport.ITransport,ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Creates a new instance of <see cref="T:ModelContextProtocol.Server.McpServer"/>.
            </summary>
            <param name="transport">Transport to use for the server representing an already-established session.</param>
            <param name="options">Configuration options for this server, including capabilities.
            Make sure to accurately reflect exactly what capabilities the server supports and does not support.</param>
            <param name="loggerFactory">Logger factory to use for logging</param>
            <param name="serviceProvider">Optional service provider to use for dependency injection</param>
            <exception cref="T:ModelContextProtocol.McpException">The server was incorrectly configured.</exception>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ClientCapabilities">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ClientInfo">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.ServerOptions">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.Services">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.EndpointName">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServer.LoggingLevel">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServer.RunAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServer.ToLoggingLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>Maps a <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to a <see cref="P:ModelContextProtocol.Server.McpServer.LoggingLevel"/>.</summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerExtensions">
            <summary>
            Provides extension methods for interacting with an <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestSamplingAsync(ModelContextProtocol.Server.IMcpServer,ModelContextProtocol.Protocol.Types.CreateMessageRequestParams,System.Threading.CancellationToken)">
            <summary>
            Requests to sample an LLM via the client using the specified request parameters.
            </summary>
            <param name="server">The server instance initiating the request.</param>
            <param name="request">The parameters for the sampling request.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A task containing the sampling result from the client.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
            <remarks>
            This method requires the client to support sampling capabilities.
            It allows detailed control over sampling parameters including messages, system prompt, temperature, 
            and token limits.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestSamplingAsync(ModelContextProtocol.Server.IMcpServer,System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <summary>
            Requests to sample an LLM via the client using the provided chat messages and options.
            </summary>
            <param name="server">The server initiating the request.</param>
            <param name="messages">The messages to send as part of the request.</param>
            <param name="options">The options to use for the request, including model parameters and constraints.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task containing the chat response from the model.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="messages"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
            <remarks>
            This method converts the provided chat messages into a format suitable for the sampling API,
            handling different content types such as text, images, and audio.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.AsSamplingChatClient(ModelContextProtocol.Server.IMcpServer)">
            <summary>
            Creates an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> wrapper that can be used to send sampling requests to the client.
            </summary>
            <param name="server">The server to be wrapped as an <see cref="T:Microsoft.Extensions.AI.IChatClient"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.AI.IChatClient"/> that can be used to issue sampling requests to the client.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support sampling.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.AsClientLoggerProvider(ModelContextProtocol.Server.IMcpServer)">
            <summary>Gets an <see cref="T:Microsoft.Extensions.Logging.ILogger"/> on which logged messages will be sent as notifications to the client.</summary>
            <param name="server">The server to wrap as an <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> that can be used to log to the client..</returns>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.RequestRootsAsync(ModelContextProtocol.Server.IMcpServer,ModelContextProtocol.Protocol.Types.ListRootsRequestParams,System.Threading.CancellationToken)">
            <summary>
            Requests the client to list the roots it exposes.
            </summary>
            <param name="server">The server initiating the request.</param>
            <param name="request">The parameters for the list roots request.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A task containing the list of roots exposed by the client.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="server"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">The client does not support roots.</exception>
            <remarks>
            This method requires the client to support the roots capability.
            Root resources allow clients to expose a hierarchical structure of resources that can be
            navigated and accessed by the server. These resources might include file systems, databases,
            or other structured data sources that the client makes available through the protocol.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient">
            <summary>Provides an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> implementation that's implemented via client sampling.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>Provides an <see cref="T:Microsoft.Extensions.AI.IChatClient"/> implementation that's implemented via client sampling.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.GetResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.Microsoft#Extensions#AI#IChatClient#GetStreamingResponseAsync(System.Collections.Generic.IEnumerable{Microsoft.Extensions.AI.ChatMessage},Microsoft.Extensions.AI.ChatOptions,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.Microsoft#Extensions#AI#IChatClient#GetService(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.SamplingChatClient.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider">
            <summary>
            Provides an <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> implementation for creating loggers
            that send logging message notifications to the client for logged messages.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>
            Provides an <see cref="T:Microsoft.Extensions.Logging.ILoggerProvider"/> implementation for creating loggers
            that send logging message notifications to the client for logged messages.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.CreateLogger(System.String)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.System#IDisposable#Dispose">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.ClientLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.ClientLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerExtensions.ClientLoggerProvider.ClientLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerFactory">
            <summary>
            Provides a factory for creating <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instances.
            </summary>
            <remarks>
            This is the recommended way to create <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instances.
            The factory handles proper initialization of server instances with the required dependencies.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerFactory.Create(ModelContextProtocol.Protocol.Transport.ITransport,ModelContextProtocol.Server.McpServerOptions,Microsoft.Extensions.Logging.ILoggerFactory,System.IServiceProvider)">
            <summary>
            Creates a new instance of an <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </summary>
            <param name="transport">Transport to use for the server representing an already-established MCP session.</param>
            <param name="serverOptions">Configuration options for this server, including capabilities. </param>
            <param name="loggerFactory">Logger factory to use for logging. If null, logging will be disabled.</param>
            <param name="serviceProvider">Optional service provider to create new instances of tools and other dependencies.</param>
            <returns>An <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance that should be disposed when no longer needed.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="transport"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="serverOptions"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerHandlers">
            <summary>
            Provides a container for handlers used in the creation of an MCP server.
            </summary>
            <remarks>
            <para>
            This class provides a centralized collection of delegates that implement various capabilities of the Model Context Protocol.
            Each handler in this class corresponds to a specific endpoint in the Model Context Protocol and
            is responsible for processing a particular type of request. The handlers are used to customize
            the behavior of the MCP server by providing implementations for the various protocol operations.
            </para>
            <para>
            Handlers can be configured individually using the extension methods in <see cref="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions"/>
            such as <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListToolsResult}})"/> and
            <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCallToolHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.CallToolResponse}})"/>.
            </para>
            <para>
            When a client sends a request to the server, the appropriate handler is invoked to process the
            request and produce a response according to the protocol specification. Which handler is selected
            is done based on an ordinal, case-sensitive string comparison.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListToolsHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsList"/> requests.
            </summary>
            <remarks>
            <para>
            The handler should return a list of available tools when requested by a client.
            It supports pagination through the cursor mechanism, where the client can make
            repeated calls with the cursor returned by the previous call to retrieve more tools.
            </para>
            <para>
            This handler works alongside any tools defined in the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> collection.
            Tools from both sources will be combined when returning results to clients.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.CallToolHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ToolsCall"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client makes a call to a tool that isn't found in the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> collection.
            The handler should implement logic to execute the requested tool and return appropriate results.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListPromptsHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsList"/> requests.
            </summary>
            <remarks>
            <para>
            The handler should return a list of available prompts when requested by a client.
            It supports pagination through the cursor mechanism, where the client can make
            repeated calls with the cursor returned by the previous call to retrieve more prompts.
            </para>
            <para>
            This handler works alongside any prompts defined in the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> collection.
            Prompts from both sources will be combined when returning results to clients.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.GetPromptHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.PromptsGet"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client requests details for a specific prompt that isn't found in the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> collection.
            The handler should implement logic to fetch or generate the requested prompt and return appropriate results.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListResourceTemplatesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> requests.
            </summary>
            <remarks>
            The handler should return a list of available resource templates when requested by a client.
            It supports pagination through the cursor mechanism, where the client can make
            repeated calls with the cursor returned by the previous call to retrieve more resource templates.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ListResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> requests.
            </summary>
            <remarks>
            The handler should return a list of available resources when requested by a client.
            It supports pagination through the cursor mechanism, where the client can make
            repeated calls with the cursor returned by the previous call to retrieve more resources.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.ReadResourceHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesRead"/> requests.
            </summary>
            <remarks>
            This handler is invoked when a client requests the content of a specific resource identified by its URI.
            The handler should implement logic to locate and retrieve the requested resource.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.CompleteHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.CompletionComplete"/> requests.
            </summary>
            <remarks>
            This handler provides auto-completion suggestions for prompt arguments or resource references in the Model Context Protocol.
            The handler processes auto-completion requests, returning a list of suggestions based on the 
            reference type and current argument value.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.SubscribeToResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesSubscribe"/> requests.
            </summary>
            <remarks>
            <para>
            This handler is invoked when a client wants to receive notifications about changes to specific resources or resource patterns.
            The handler should implement logic to register the client's interest in the specified resources
            and set up the necessary infrastructure to send notifications when those resources change.
            </para>
            <para>
            After a successful subscription, the server should send resource change notifications to the client
            whenever a relevant resource is created, updated, or deleted.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.UnsubscribeFromResourcesHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesUnsubscribe"/> requests.
            </summary>
            <remarks>
            <para>
            This handler is invoked when a client wants to stop receiving notifications about previously subscribed resources.
            The handler should implement logic to remove the client's subscriptions to the specified resources
            and clean up any associated resources.
            </para>
            <para>
            After a successful unsubscription, the server should no longer send resource change notifications
            to the client for the specified resources.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerHandlers.SetLoggingLevelHandler">
            <summary>
            Gets or sets the handler for <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel"/> requests.
            </summary>
            <remarks>
            <para>
            This handler processes <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.LoggingSetLevel"/> requests from clients. When set, it enables
            clients to control which log messages they receive by specifying a minimum severity threshold.
            </para>
            <para>
            After handling a level change request, the server typically begins sending log messages
            at or above the specified level to the client as notifications/message notifications.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerHandlers.OverwriteWithSetHandlers(ModelContextProtocol.Server.McpServerOptions)">
            <summary>
            Overwrite any handlers in McpServerOptions with non-null handlers from this instance.
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerOptions">
            <summary>
            Provides configuration options for the MCP server.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ServerInfo">
            <summary>
            Gets or sets information about this server implementation, including its name and version.
            </summary>
            <remarks>
            This information is sent to the client during initialization to identify the server.
            It's displayed in client logs and can be used for debugging and compatibility checks.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.Capabilities">
            <summary>
            Gets or sets server capabilities to advertise to the client.
            </summary>
            <remarks>
            These determine which features will be available when a client connects.
            Capabilities can include "tools", "prompts", "resources", "logging", and other 
            protocol-specific functionality.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ProtocolVersion">
            <summary>
            Gets or sets the protocol version supported by this server, using a date-based versioning scheme.
            </summary>
            <remarks>
            The protocol version defines which features and message formats this server supports.
            This uses a date-based versioning scheme in the format "YYYY-MM-DD".
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.InitializationTimeout">
            <summary>
            Gets or sets a timeout used for the client-server initialization handshake sequence.
            </summary>
            <remarks>
            This timeout determines how long the server will wait for client responses during
            the initialization protocol handshake. If the client doesn't respond within this timeframe,
            the initialization process will be aborted.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ServerInstructions">
            <summary>
            Gets or sets optional server instructions to send to clients.
            </summary>
            <remarks>
            These instructions are sent to clients during the initialization handshake and provide
            guidance on how to effectively use the server's capabilities. They can include details
            about available tools, expected input formats, limitations, or other helpful information.
            Client applications typically use these instructions as system messages for LLM interactions
            to provide context about available functionality.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerOptions.ScopeRequests">
            <summary>
            Gets or sets whether to create a new service provider scope for each handled request.
            </summary>
            <remarks>
            The default is <see langword="true"/>. When <see langword="true"/>, each invocation of a request
            handler will be invoked within a new service scope.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1">
            <summary>Provides a thread-safe collection of <typeparamref name="T"/> instances, indexed by their names.</summary>
            <typeparam name="T">Specifies the type of primitive stored in the collection.</typeparam>
        </member>
        <member name="F:ModelContextProtocol.Server.McpServerPrimitiveCollection`1._primitives">
            <summary>Concurrent dictionary of primitives, indexed by their names.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1"/> class.
            </summary>
        </member>
        <member name="E:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Changed">
            <summary>Occurs when the collection is changed.</summary>
            <remarks>
            By default, this is raised when a primitive is added or removed. However, a derived implementation
            may raise this event for other reasons, such as when a primitive is modified.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Count">
            <summary>Gets the number of primitives in the collection.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.IsEmpty">
            <summary>Gets whether there are any primitives in the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.RaiseChanged">
            <summary>Raises <see cref="E:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Changed"/> if there are registered handlers.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Item(System.String)">
            <summary>Gets the <typeparamref name="T"/> with the specified <paramref name="name"/> from the collection.</summary>
            <param name="name">The name of the primitive to retrieve.</param>
            <returns>The <typeparamref name="T"/> with the specified name.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">An primitive with the specified name does not exist in the collection.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Clear">
            <summary>Clears all primitives from the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Add(`0)">
            <summary>Adds the specified <typeparamref name="T"/> to the collection.</summary>
            <param name="primitive">The primitive to be added.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException">A primitive with the same name as <paramref name="primitive"/> already exists in the collection.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.TryAdd(`0)">
            <summary>Adds the specified <typeparamref name="T"/> to the collection.</summary>
            <param name="primitive">The primitive to be added.</param>
            <returns><see langword="true"/> if the primitive was added; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Remove(`0)">
            <summary>Removes the specified primitivefrom the collection.</summary>
            <param name="primitive">The primitive to be removed from the collection.</param>
            <returns>
            <see langword="true"/> if the primitive was found in the collection and removed; otherwise, <see langword="false"/> if it couldn't be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.TryGetPrimitive(System.String,`0@)">
            <summary>Attempts to get the primitive with the specified name from the collection.</summary>
            <param name="name">The name of the primitive to retrieve.</param>
            <param name="primitive">The primitive, if found; otherwise, <see langword="null"/>.</param>
            <returns>
            <see langword="true"/> if the primitive was found in the collection and return; otherwise, <see langword="false"/> if it couldn't be found.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.Contains(`0)">
            <summary>Checks if a specific primitive is present in the collection of primitives.</summary>
            <param name="primitive">The primitive to search for in the collection.</param>
            <see langword="true"/> if the primitive was found in the collection and return; otherwise, <see langword="false"/> if it couldn't be found.
            <exception cref="T:System.ArgumentNullException"><paramref name="primitive"/> is <see langword="null"/>.</exception>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.PrimitiveNames">
            <summary>Gets the names of all of the primitives in the collection.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.ToArray">
            <summary>Creates an array containing all of the primitives in the collection.</summary>
            <returns>An array containing all of the primitives in the collection.</returns>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrimitiveCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPrompt">
            <summary>
            Represents an invocable prompt used by Model Context Protocol clients and servers.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> is an abstract base class that represents an MCP prompt for use in the server (as opposed
            to <see cref="T:ModelContextProtocol.Protocol.Types.Prompt"/>, which provides the protocol representation of a prompt, and <see cref="T:ModelContextProtocol.Client.McpClientPrompt"/>, which
            provides a client-side representation of a prompt). Instances of <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> can be added into a
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to be picked up automatically when <see cref="T:ModelContextProtocol.Server.McpServerFactory"/> is used to create
            an <see cref="T:ModelContextProtocol.Server.IMcpServer"/>, or added into a <see cref="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1"/>.
            </para>
            <para>
            Most commonly, <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances are created using the static <see cref="M:McpServerPrompt.Create"/> methods.
            These methods enable creating an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> for a method, specified via a <see cref="T:System.Delegate"/> or 
            <see cref="T:System.Reflection.MethodInfo"/>, and are what are used implicitly by <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPromptsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)"/> and
            <see cref="M:McpServerBuilderExtensions.WithPrompts"/>. The <see cref="M:McpServerPrompt.Create"/> methods
            create <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances capable of working with a large variety of .NET method signatures, automatically handling
            how parameters are marshaled into the method from the JSON received from the MCP client, and how the return value is marshaled back
            into the <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> that's then serialized and sent back to the client.
            </para>
            <para>
            By default, parameters are sourced from the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/> dictionary, which is a collection
            of key/value pairs. Those parameters are deserialized from the
            <see cref="T:System.Text.Json.JsonElement"/> values in that collection. There are a few exceptions to this:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance associated
                  with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are bound to an <see cref="T:System.IProgress`1"/> instance manufactured to forward progress notifications
                  from the prompt to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, progress reports issued
                  to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will be resolved from the <see cref="T:System.IServiceProvider"/> provided to 
                  <see cref="M:ModelContextProtocol.Server.McpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)"/> rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided to <see cref="M:ModelContextProtocol.Server.McpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)"/> rather than from the argument collection.
                </description>
              </item>
            </list>
            </para>
            <para>
            All other parameters are deserialized from the <see cref="T:System.Text.Json.JsonElement"/>s in the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/> dictionary.
            </para>
            <para>
            In general, the data supplied via the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/>'s dictionary is passed along from the caller and
            should thus be considered unvalidated and untrusted. To provide validated and trusted data to the invocation of the prompt, consider having 
            the prompt be an instance method, referring to data stored in the instance, or using an instance or parameters resolved from the <see cref="T:System.IServiceProvider"/>
            to provide data to the method.
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> with its <see cref="P:ModelContextProtocol.Protocol.Types.PromptMessage.Content"/> set to contain the <see cref="T:System.String"/>.</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/></term>
                <description>Converted to a list containing the single <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/></term>
                <description>Converted to a list containing all of the returned <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.ChatMessage"/></term>
                <description>Converted to a list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances derived from the <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> with <see cref="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/></term>
                <description>Converted to a list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances derived from all of the <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> instances with <see cref="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.</description>
              </item>
            </list>
            <para>
            Other returned types will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> class.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrompt.ProtocolPrompt">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Prompt"/> type for this instance.</summary>
            <remarks>
            The ProtocolPrompt property represents the underlying prompt definition as defined in the
            Model Context Protocol specification. It contains metadata like the prompt's name,
            description, and acceptable arguments.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.GetAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken)">
            <summary>
            Gets the prompt, rendering it with the provided request parameters and returning the prompt result.
            </summary>
            <param name="request">
            The request context containing information about the prompt invocation, including any arguments
            passed to the prompt. This object provides access to both the request parameters and the server context.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation, containing a <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> with
            the prompt content and messages.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The prompt implementation returns <see langword="null"/> or an unsupported result type.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Delegate,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.</param>
            <param name="target">The instance if <paramref name="method"/> is an instance method; otherwise, <see langword="null"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is an instance method but <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> for
            and instance method, along with a <see cref="T:System.Type"/> representing the type of the target object to
            instantiate each time the method is invoked.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> that wraps the specified <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <param name="function">The function to wrap.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> to control its behavior.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
            <remarks>
            Unlike the other overloads of Create, the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> created by <see cref="M:ModelContextProtocol.Server.McpServerPrompt.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerPromptCreateOptions)"/>
            does not provide all of the special parameter handling for MCP-specific concepts, like <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPrompt.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPrompt.ModelContextProtocol#Server#IMcpServerPrimitive#Id">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptAttribute">
            <summary>
            Used to indicate that a method should be considered an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            <para>
            This attribute is applied to methods that should be exposed as prompts in the Model Context Protocol. When a class 
            containing methods marked with this attribute is registered with <see cref="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions"/>,
            these methods become available as prompts that can be called by MCP clients.
            </para>
            <para>
            When methods are provided directly to <see cref="M:McpServerPrompt.Create"/>, the attribute is not required.
            </para>
            <para>
            By default, parameters are sourced from the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/> dictionary, which is a collection
            of key/value pairs. Those parameters are deserialized from the
            <see cref="T:System.Text.Json.JsonElement"/> values in that collection. There are a few exceptions to this:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance associated
                  with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are bound to an <see cref="T:System.IProgress`1"/> instance manufactured to forward progress notifications
                  from the prompt to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, progress reports issued
                  to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will be resolved from the <see cref="T:System.IServiceProvider"/> provided to the 
                  prompt invocation rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided to the prompt invocation rather than from the argument collection.
                </description>
              </item>
            </list>
            </para>
            <para>
            All other parameters are deserialized from the <see cref="T:System.Text.Json.JsonElement"/>s in the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/> dictionary.
            </para>
            <para>
            In general, the data supplied via the <see cref="P:ModelContextProtocol.Protocol.Types.GetPromptRequestParams.Arguments"/>'s dictionary is passed along from the caller and
            should thus be considered unvalidated and untrusted. To provide validated and trusted data to the invocation of the prompt, consider having 
            the prompt be an instance method, referring to data stored in the instance, or using an instance or parameters resolved from the <see cref="T:System.IServiceProvider"/>
            to provide data to the method.
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.GetPromptResult"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> with its <see cref="P:ModelContextProtocol.Protocol.Types.PromptMessage.Content"/> set to contain the <see cref="T:System.String"/>.</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/></term>
                <description>Converted to a list containing the single <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/></term>
                <description>Converted to a list containing all of the returned <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.ChatMessage"/></term>
                <description>Converted to a list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances derived from the <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> with <see cref="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Extensions.AI.ChatMessage"/></term>
                <description>Converted to a list of <see cref="T:ModelContextProtocol.Protocol.Types.PromptMessage"/> instances derived from all of the <see cref="T:Microsoft.Extensions.AI.ChatMessage"/> instances with <see cref="M:ModelContextProtocol.AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.</description>
              </item>
            </list>
            <para>
            Other returned types will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPromptAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptAttribute.Name">
            <summary>Gets the name of the prompt.</summary>
            <remarks>If <see langword="null"/>, the method name will be used.</remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptCreateOptions">
            <summary>
            Provides options for controlling the creation of an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            <para>
            These options allow for customizing the behavior and metadata of prompts created with
            <see cref="M:McpServerPrompt.Create"/>. They provide control over naming, description,
            and dependency injection integration.
            </para>
            <para>
            When creating prompts programmatically rather than using attributes, these options
            provide the same level of configuration flexibility.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Services">
            <summary>
            Gets or sets optional services used in the construction of the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            These services will be used to determine which parameters should be satisifed from dependency injection. As such,
            what services are satisfied via this provider should match what's satisfied via the provider passed in at invocation time.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Name">
            <summary>
            Gets or sets the name to use for the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/> is applied to the method,
            the name from the attribute will be used. If that's not present, a name based on the method's name will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.Description">
            <summary>
            Gets or set the description to use for the <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but a <see cref="T:System.ComponentModel.DescriptionAttribute"/> is applied to the method,
            the description from that attribute will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.SerializerOptions">
            <summary>
            Gets or sets the JSON serializer options to use when marshalling data to/from JSON.
            </summary>
            <remarks>
            Defaults to <see cref="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions"/> if left unspecified.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerPromptCreateOptions.SchemaCreateOptions">
            <summary>
            Gets or sets the JSON schema options when creating <see cref="T:Microsoft.Extensions.AI.AIFunction"/> from a method.
            </summary>
            <remarks>
            Defaults to <see cref="P:Microsoft.Extensions.AI.AIJsonSchemaCreateOptions.Default"/> if left unspecified.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerPromptCreateOptions.Clone">
            <summary>
            Creates a shallow clone of the current <see cref="T:ModelContextProtocol.Server.McpServerPromptCreateOptions"/> instance.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerPromptTypeAttribute">
            <summary>
            Used to attribute a type containing methods that should be exposed as <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>s.
            </summary>
            <remarks>
            <para>
            This attribute is used to mark a class containing methods that should be automatically
            discovered and registered as <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>s. When combined with discovery methods like
            <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPromptsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)"/>, it enables automatic registration 
            of prompts without explicitly listing each prompt class. The attribute is not necessary when a reference
            to the type is provided directly to a method like <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)"/>.
            </para>
            <para>
            Within a class marked with this attribute, individual methods that should be exposed as
            prompts must be marked with the <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerResource">
            <summary>
            Represents an invocable resource used by Model Context Protocol clients and servers.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Server.McpServerResource"/> is an abstract base class that represents an MCP resource for use in the server (as opposed
            to <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> or <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/>, which provide the protocol representations of a resource). Instances of 
            <see cref="T:ModelContextProtocol.Server.McpServerResource"/> can be added into a <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to be picked up automatically when
            <see cref="T:ModelContextProtocol.Server.McpServerFactory"/> is used to create an <see cref="T:ModelContextProtocol.Server.IMcpServer"/>, or added into a <see cref="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1"/>.
            </para>
            <para>
            Most commonly, <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances are created using the static <see cref="M:McpServerResource.Create"/> methods.
            These methods enable creating an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> for a method, specified via a <see cref="T:System.Delegate"/> or 
            <see cref="T:System.Reflection.MethodInfo"/>, and are what are used implicitly by <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResourcesFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)"/> and
            <see cref="M:McpServerBuilderExtensions.WithResources"/>. The <see cref="M:McpServerResource.Create"/> methods
            create <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances capable of working with a large variety of .NET method signatures, automatically handling
            how parameters are marshaled into the method from the URI received from the MCP client, and how the return value is marshaled back
            into the <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/> that's then serialized and sent back to the client.
            </para>
            <para>
            <see cref="T:ModelContextProtocol.Server.McpServerResource"/> is used to represent both direct resources (e.g. "resource://example") and templated
            resources (e.g. "resource://example/{id}").
            </para>
            <para>
            Read resource requests do not contain separate arguments, only a URI. However, for templated resources, portions of that URI may be considered
            as arguments and may be bound to parameters. Further, resource methods may accept parameters that will be bound to arguments based on their type.
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance associated
                  with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are bound to an <see cref="T:System.IProgress`1"/> instance manufactured to forward progress notifications
                  from the resource to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, progress reports issued
                  to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will be resolved from the <see cref="T:System.IServiceProvider"/> provided to the 
                  resource invocation rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided to the resource invocation rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  All other parameters are bound from the data in the URI.
                </description>
              </item>
            </list>
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/></term>
                <description>Wrapped in a list containing the single <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.TextContent"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.DataContent"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/></term>
                <description>Returned directly as a list of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Converted to a list containing a <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/> for each <see cref="T:Microsoft.Extensions.AI.TextContent"/> and a <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/> for each <see cref="T:Microsoft.Extensions.AI.DataContent"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/></term>
                <description>Converted to a list containing a <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>, one for each <see cref="T:System.String"/>.</description>
              </item>
            </list>
            <para>
            Other returned types will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> class.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResource.IsTemplated">
            <summary>Gets whether this resource is a URI template with parameters as opposed to a direct resource.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResource.ProtocolResourceTemplate">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.ResourceTemplate"/> type for this instance.</summary>
            <remarks>
            <para>
            The <see cref="P:ModelContextProtocol.Server.McpServerResource.ProtocolResourceTemplate"/> property represents the underlying resource template definition as defined in the
            Model Context Protocol specification. It contains metadata like the resource templates's URI template, name, and description.
            </para>
            <para>
            Every valid resource URI is a valid resource URI template, and thus this property always returns an instance.
            In contrast, the <see cref="P:ModelContextProtocol.Server.McpServerResource.ProtocolResource"/> property may return <see langword="null"/> if the resource template
            contains a parameter, in which case the resource template URI is not a valid resource URI.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResource.ProtocolResource">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Resource"/> type for this instance.</summary>
            <remarks>
            The ProtocolResourceTemplate property represents the underlying resource template definition as defined in the
            Model Context Protocol specification. It contains metadata like the resource templates's URI template, name, and description.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.ReadAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken)">
            <summary>
            Gets the resource, rendering it with the provided request parameters and returning the resource result.
            </summary>
            <param name="request">
            The request context containing information about the resource invocation, including any arguments
            passed to the resource. This object provides access to both the request parameters and the server context.
            </param>
            <param name="cancellationToken">
            The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.
            </param>
            <returns>
            A <see cref="T:System.Threading.Tasks.ValueTask`1"/> representing the asynchronous operation, containing a <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/> with
            the resource content and messages. If and only if this <see cref="T:ModelContextProtocol.Server.McpServerResource"/> doesn't match the <see cref="P:ModelContextProtocol.Protocol.Types.ReadResourceRequestParams.Uri"/>,
            the method returns <see langword="null"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">The resource implementation returned <see langword="null"/> or an unsupported result type.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.Create(System.Delegate,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerResource"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.</param>
            <param name="target">The instance if <paramref name="method"/> is an instance method; otherwise, <see langword="null"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerResource"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is an instance method but <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> for
            and instance method, along with a <see cref="T:System.Type"/> representing the type of the target object to
            instantiate each time the method is invoked.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> to control its behavior.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerResourceCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerResource"/> that wraps the specified <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <param name="function">The function to wrap.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> to control its behavior.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
            <remarks>
            Unlike the other overloads of Create, the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> created by <see cref="M:ModelContextProtocol.Server.McpServerResource.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerResourceCreateOptions)"/>
            does not provide all of the special parameter handling for MCP-specific concepts, like <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResource.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResource.ModelContextProtocol#Server#IMcpServerPrimitive#Id">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerResourceAttribute">
            <summary>
            Used to indicate that a method or property should be considered an <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            <para>
            This attribute is applied to methods or properties that should be exposed as resources in the Model Context Protocol. When a class 
            containing methods marked with this attribute is registered with <see cref="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions"/>,
            these methods or properties become available as resources that can be called by MCP clients.
            </para>
            <para>
            When methods are provided directly to <see cref="M:McpServerResource.Create"/>, the attribute is not required.
            </para>
            <para>
            Read resource requests do not contain separate arguments, only a URI. However, for templated resources, portions of that URI may be considered
            as arguments and may be bound to parameters. Further, resource methods may accept parameters that will be bound to arguments based on their type.
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instance associated
                  with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are bound to an <see cref="T:System.IProgress`1"/> instance manufactured to forward progress notifications
                  from the resource to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, progress reports issued
                  to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerResource"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will be resolved from the <see cref="T:System.IServiceProvider"/> provided to the 
                  resource invocation rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided to the resource invocation rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  All other parameters are bound from the data in the URI.
                </description>
              </item>
            </list>
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.ReadResourceResult"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/></term>
                <description>Wrapped in a list containing the single <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.TextContent"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.DataContent"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a list containing a single <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/></term>
                <description>Returned directly as a list of <see cref="T:ModelContextProtocol.Protocol.Types.ResourceContents"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Converted to a list containing a <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/> for each <see cref="T:Microsoft.Extensions.AI.TextContent"/> and a <see cref="T:ModelContextProtocol.Protocol.Types.BlobResourceContents"/> for each <see cref="T:Microsoft.Extensions.AI.DataContent"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/></term>
                <description>Converted to a list containing a <see cref="T:ModelContextProtocol.Protocol.Types.TextResourceContents"/>, one for each <see cref="T:System.String"/>.</description>
              </item>
            </list>
            <para>
            Other returned types will result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResourceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceAttribute.UriTemplate">
            <summary>Gets or sets the URI template of the resource.</summary>
            <remarks>
            If <see langword="null"/>, a URI will be derived from <see cref="P:ModelContextProtocol.Server.McpServerResourceAttribute.Name"/> and the method's parameter names.
            This template may, but doesn't have to, include parameters; if it does, this <see cref="T:ModelContextProtocol.Server.McpServerResource"/>
            will be considered a "resource template", and if it doesn't, it will be considered a "direct resource".
            The former will be listed with <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesTemplatesList"/> requests and the latter
            with <see cref="F:ModelContextProtocol.Protocol.Messages.RequestMethods.ResourcesList"/> requests.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceAttribute.Name">
            <summary>Gets or sets the name of the resource.</summary>
            <remarks>If <see langword="null"/>, the method name will be used.</remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceAttribute.MimeType">
            <summary>Gets or sets the MIME (media) type of the resource.</summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerResourceCreateOptions">
            <summary>
            Provides options for controlling the creation of an <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            <para>
            These options allow for customizing the behavior and metadata of resources created with
            <see cref="M:McpServerResource.Create"/>. They provide control over naming, description,
            and dependency injection integration.
            </para>
            <para>
            When creating resources programmatically rather than using attributes, these options
            provide the same level of configuration flexibility.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.Services">
            <summary>
            Gets or sets optional services used in the construction of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            These services will be used to determine which parameters should be satisifed from dependency injection. As such,
            what services are satisfied via this provider should match what's satisfied via the provider passed in at invocation time.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.UriTemplate">
            <summary>
            Gets or sets the URI template of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/> is applied to the member,
            the <see cref="P:ModelContextProtocol.Server.McpServerResourceAttribute.UriTemplate"/> from the attribute will be used. If that's not present,
            a URI template will be inferred from the member's signature.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.Name">
            <summary>
            Gets or sets the name to use for the <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/> is applied to the member,
            the name from the attribute will be used. If that's not present, a name based on the members's name will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.Description">
            <summary>
            Gets or set the description to use for the <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but a <see cref="T:System.ComponentModel.DescriptionAttribute"/> is applied to the member,
            the description from that attribute will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerResourceCreateOptions.MimeType">
            <summary>
            Gets or sets the MIME (media) type of the <see cref="T:ModelContextProtocol.Server.McpServerResource"/>.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerResourceCreateOptions.Clone">
            <summary>
            Creates a shallow clone of the current <see cref="T:ModelContextProtocol.Server.McpServerResourceCreateOptions"/> instance.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerResourceTypeAttribute">
            <summary>
            Used to attribute a type containing members that should be exposed as <see cref="T:ModelContextProtocol.Server.McpServerResource"/>s.
            </summary>
            <remarks>
            <para>
            This attribute is used to mark a class containing members that should be automatically
            discovered and registered as <see cref="T:ModelContextProtocol.Server.McpServerResource"/>s. When combined with discovery methods like
            <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResourcesFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)"/>, it enables automatic registration 
            of resources without explicitly listing each resource class. The attribute is not necessary when a reference
            to the type is provided directly to a method like <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResources``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)"/>.
            </para>
            <para>
            Within a class marked with this attribute, individual members that should be exposed as
            resources must be marked with the <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerTool">
            <summary>
            Represents an invocable tool used by Model Context Protocol clients and servers.
            </summary>
            <remarks>
            <para>
            <see cref="T:ModelContextProtocol.Server.McpServerTool"/> is an abstract base class that represents an MCP tool for use in the server (as opposed
            to <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/>, which provides the protocol representation of a tool, and <see cref="T:ModelContextProtocol.Client.McpClientTool"/>, which
            provides a client-side representation of a tool). Instances of <see cref="T:ModelContextProtocol.Server.McpServerTool"/> can be added into a
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to be picked up automatically when <see cref="T:ModelContextProtocol.Server.McpServerFactory"/> is used to create
            an <see cref="T:ModelContextProtocol.Server.IMcpServer"/>, or added into a <see cref="T:ModelContextProtocol.Server.McpServerPrimitiveCollection`1"/>.
            </para>
            <para>
            Most commonly, <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances are created using the static <see cref="M:McpServerTool.Create"/> methods.
            These methods enable creating an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> for a method, specified via a <see cref="T:System.Delegate"/> or 
            <see cref="T:System.Reflection.MethodInfo"/>, and are what are used implicitly by <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithToolsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)"/> and
            <see cref="M:McpServerBuilderExtensions.WithTools"/>. The <see cref="M:McpServerTool.Create"/> methods
            create <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances capable of working with a large variety of .NET method signatures, automatically handling
            how parameters are marshaled into the method from the JSON received from the MCP client, and how the return value is marshaled back
            into the <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> that's then serialized and sent back to the client.
            </para>
            <para>
            By default, parameters are sourced from the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/> dictionary, which is a collection
            of key/value pairs, and are represented in the JSON schema for the function, as exposed in the returned <see cref="T:ModelContextProtocol.Server.McpServerTool"/>'s
            <see cref="P:ModelContextProtocol.Server.McpServerTool.ProtocolTool"/>'s <see cref="P:ModelContextProtocol.Protocol.Types.Tool.InputSchema"/>. Those parameters are deserialized from the
            <see cref="T:System.Text.Json.JsonElement"/> values in that collection. There are a few exceptions to this:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>. The parameter is not included in the generated JSON schema.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request,
                  and are not included in the JSON schema.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are not included in the JSON schema and are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/>
                  instance associated with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are not included in the JSON schema and are bound to an <see cref="T:System.IProgress`1"/> instance manufactured
                  to forward progress notifications from the tool to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, 
                  progress reports issued to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will not be included in the generated JSON schema and will be resolved 
                  from the <see cref="T:System.IServiceProvider"/> provided to <see cref="M:ModelContextProtocol.Server.McpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)"/> rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided to <see cref="M:ModelContextProtocol.Server.McpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)"/> rather than from the argument
                  collection, and will not be included in the generated JSON schema.
                </description>
              </item>
            </list>
            </para>
            <para>
            All other parameters are deserialized from the <see cref="T:System.Text.Json.JsonElement"/>s in the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/> dictionary, 
            using the <see cref="T:System.Text.Json.JsonSerializerOptions"/> supplied in <see cref="P:ModelContextProtocol.Server.McpServerToolCreateOptions.SerializerOptions"/>, or if none was provided, 
            using <see cref="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions"/>.
            </para>
            <para>
            In general, the data supplied via the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/>'s dictionary is passed along from the caller and
            should thus be considered unvalidated and untrusted. To provide validated and trusted data to the invocation of the tool, consider having 
            the tool be an instance method, referring to data stored in the instance, or using an instance or parameters resolved from the <see cref="T:System.IServiceProvider"/>
            to provide data to the method.
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see langword="null"/></term>
                <description>Returns an empty <see cref="P:ModelContextProtocol.Protocol.Types.CallToolResponse.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Converted to a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object using <see cref="M:ModelContextProtocol.AIContentExtensions.ToContent(Microsoft.Extensions.AI.AIContent)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Text"/> set to the string value and <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.Content"/></term>
                <description>Returned as a single-item <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/></term>
                <description>Each <see cref="T:System.String"/> is converted to a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Text"/> set to the string value and <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Each <see cref="T:Microsoft.Extensions.AI.AIContent"/> is converted to a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object using <see cref="M:ModelContextProtocol.AIContentExtensions.ToContent(Microsoft.Extensions.AI.AIContent)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.Content"/></term>
                <description>Returned as the <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/></term>
                <description>Returned directly without modification.</description>
              </item>
              <item>
                <term>Other types</term>
                <description>Serialized to JSON and returned as a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.#ctor">
            <summary>Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> class.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTool.ProtocolTool">
            <summary>Gets the protocol <see cref="T:ModelContextProtocol.Protocol.Types.Tool"/> type for this instance.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.InvokeAsync(ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken)">
            <summary>Invokes the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</summary>
            <param name="request">The request information resulting in the invocation of this tool.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>The call response from invoking the tool.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="request"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Delegate,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerTool"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Reflection.MethodInfo,System.Object,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via a <see cref="T:System.Delegate"/> instance.
            </summary>
            <param name="method">The method to be represented via the created <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.</param>
            <param name="target">The instance if <paramref name="method"/> is an instance method; otherwise, <see langword="null"/>.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:ModelContextProtocol.Server.McpServerTool"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="method"/> is an instance method but <paramref name="target"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(System.Reflection.MethodInfo,System.Type,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>
            Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instance for a method, specified via an <see cref="T:System.Reflection.MethodInfo"/> for
            and instance method, along with a <see cref="T:System.Type"/> representing the type of the target object to
            instantiate each time the method is invoked.
            </summary>
            <param name="method">The instance method to be represented via the created <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</param>
            <param name="targetType">
            The <see cref="T:System.Type"/> to construct an instance of on which to invoke <paramref name="method"/> when
            the resulting <see cref="T:Microsoft.Extensions.AI.AIFunction"/> is invoked. If services are provided,
            ActivatorUtilities.CreateInstance will be used to construct the instance using those services; otherwise,
            <see cref="M:System.Activator.CreateInstance(System.Type)"/> is used, utilizing the type's public parameterless constructor.
            If an instance can't be constructed, an exception is thrown during the function's invocation.
            </param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <returns>The created <see cref="T:Microsoft.Extensions.AI.AIFunction"/> for invoking <paramref name="method"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="method"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)">
            <summary>Creates an <see cref="T:ModelContextProtocol.Server.McpServerTool"/> that wraps the specified <see cref="T:Microsoft.Extensions.AI.AIFunction"/>.</summary>
            <param name="function">The function to wrap.</param>
            <param name="options">Optional options used in the creation of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> to control its behavior.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="function"/> is <see langword="null"/>.</exception>
            <remarks>
            Unlike the other overloads of Create, the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> created by <see cref="M:ModelContextProtocol.Server.McpServerTool.Create(Microsoft.Extensions.AI.AIFunction,ModelContextProtocol.Server.McpServerToolCreateOptions)"/>
            does not provide all of the special parameter handling for MCP-specific concepts, like <see cref="T:ModelContextProtocol.Server.IMcpServer"/>.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerTool.ToString">
            <inheritdoc />
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerTool.ModelContextProtocol#Server#IMcpServerPrimitive#Id">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolAttribute">
            <summary>
            Used to indicate that a method should be considered an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            <para>
            This attribute is applied to methods that should be exposed as tools in the Model Context Protocol. When a class 
            containing methods marked with this attribute is registered with <see cref="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions"/>,
            these methods become available as tools that can be called by MCP clients.
            </para>
            <para>
            When methods are provided directly to <see cref="M:McpServerTool.Create"/>, the attribute is not required.
            </para>
            <para>
            By default, parameters are sourced from the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/> dictionary, which is a collection
            of key/value pairs, and are represented in the JSON schema for the function, as exposed in the returned <see cref="T:ModelContextProtocol.Server.McpServerTool"/>'s
            <see cref="P:ModelContextProtocol.Server.McpServerTool.ProtocolTool"/>'s <see cref="P:ModelContextProtocol.Protocol.Types.Tool.InputSchema"/>. Those parameters are deserialized from the
            <see cref="T:System.Text.Json.JsonElement"/> values in that collection. There are a few exceptions to this:
            <list type="bullet">
              <item>
                <description>
                  <see cref="T:System.Threading.CancellationToken"/> parameters are automatically bound to a <see cref="T:System.Threading.CancellationToken"/> provided by the
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> and that respects any <see cref="T:ModelContextProtocol.Protocol.Messages.CancelledNotification"/>s sent by the client for this operation's
                  <see cref="T:ModelContextProtocol.Protocol.Messages.RequestId"/>. The parameter is not included in the generated JSON schema.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IServiceProvider"/> parameters are bound from the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> for this request,
                  and are not included in the JSON schema.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:ModelContextProtocol.Server.IMcpServer"/> parameters are not included in the JSON schema and are bound directly to the <see cref="T:ModelContextProtocol.Server.IMcpServer"/>
                  instance associated with this request's <see cref="T:ModelContextProtocol.Server.RequestContext`1"/>. Such parameters may be used to understand
                  what server is being used to process the request, and to interact with the client issuing the request to that server.
                </description>
              </item>
              <item>
                <description>
                  <see cref="T:System.IProgress`1"/> parameters accepting <see cref="T:ModelContextProtocol.ProgressNotificationValue"/> values
                  are not included in the JSON schema and are bound to an <see cref="T:System.IProgress`1"/> instance manufactured
                  to forward progress notifications from the tool to the client. If the client included a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/> in their request, 
                  progress reports issued to this instance will propagate to the client as <see cref="F:ModelContextProtocol.Protocol.Messages.NotificationMethods.ProgressNotification"/> notifications with
                  that token. If the client did not include a <see cref="T:ModelContextProtocol.Protocol.Messages.ProgressToken"/>, the instance will ignore any progress reports issued to it.
                </description>
              </item>
              <item>
                <description>
                  When the <see cref="T:ModelContextProtocol.Server.McpServerTool"/> is constructed, it may be passed an <see cref="T:System.IServiceProvider"/> via 
                  <see cref="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Services"/>. Any parameter that can be satisfied by that <see cref="T:System.IServiceProvider"/>
                  according to <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceProviderIsService"/> will not be included in the generated JSON schema and will be resolved 
                  from the <see cref="T:System.IServiceProvider"/> provided to when the tool is invoked rather than from the argument collection.
                </description>
              </item>
              <item>
                <description>
                  Any parameter attributed with <see cref="T:Microsoft.Extensions.DependencyInjection.FromKeyedServicesAttribute"/> will similarly be resolved from the 
                  <see cref="T:System.IServiceProvider"/> provided when the tool is invoked rather than from the argument
                  collection, and will not be included in the generated JSON schema.
                </description>
              </item>
            </list>
            </para>
            <para>
            All other parameters are deserialized from the <see cref="T:System.Text.Json.JsonElement"/>s in the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/> dictionary, 
            using the <see cref="T:System.Text.Json.JsonSerializerOptions"/> supplied in <see cref="P:ModelContextProtocol.Server.McpServerToolCreateOptions.SerializerOptions"/>, or if none was provided, 
            using <see cref="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions"/>.
            </para>
            <para>
            In general, the data supplied via the <see cref="P:ModelContextProtocol.Protocol.Types.CallToolRequestParams.Arguments"/>'s dictionary is passed along from the caller and
            should thus be considered unvalidated and untrusted. To provide validated and trusted data to the invocation of the tool, consider having 
            the tool be an instance method, referring to data stored in the instance, or using an instance or parameters resolved from the <see cref="T:System.IServiceProvider"/>
            to provide data to the method.
            </para>
            <para>
            Return values from a method are used to create the <see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/> that is sent back to the client:
            </para>
            <list type="table">
              <item>
                <term><see langword="null"/></term>
                <description>Returns an empty <see cref="P:ModelContextProtocol.Protocol.Types.CallToolResponse.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Converted to a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object using <see cref="M:ModelContextProtocol.AIContentExtensions.ToContent(Microsoft.Extensions.AI.AIContent)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.String"/></term>
                <description>Converted to a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Text"/> set to the string value and <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.Content"/></term>
                <description>Returned as a single-item <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.String"/></term>
                <description>Each <see cref="T:System.String"/> is converted to a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Text"/> set to the string value and <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Microsoft.Extensions.AI.AIContent"/></term>
                <description>Each <see cref="T:Microsoft.Extensions.AI.AIContent"/> is converted to a <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object using <see cref="M:ModelContextProtocol.AIContentExtensions.ToContent(Microsoft.Extensions.AI.AIContent)"/>.</description>
              </item>
              <item>
                <term><see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:ModelContextProtocol.Protocol.Types.Content"/></term>
                <description>Returned as the <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> list.</description>
              </item>
              <item>
                <term><see cref="T:ModelContextProtocol.Protocol.Types.CallToolResponse"/></term>
                <description>Returned directly without modification.</description>
              </item>
              <item>
                <term>Other types</term>
                <description>Serialized to JSON and returned as a single <see cref="T:ModelContextProtocol.Protocol.Types.Content"/> object with <see cref="P:ModelContextProtocol.Protocol.Types.Content.Type"/> set to "text".</description>
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerToolAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/> class.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Name">
            <summary>Gets the name of the tool.</summary>
            <remarks>If <see langword="null"/>, the method name will be used.</remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Title">
            <summary>
            Gets or sets a human-readable title for the tool that can be displayed to users.
            </summary>
            <remarks>
            <para>
            The title provides a more descriptive, user-friendly name for the tool than the tool's
            programmatic name. It is intended for display purposes and to help users understand
            the tool's purpose at a glance.
            </para>
            <para>
            Unlike the tool name (which follows programmatic naming conventions), the title can
            include spaces, special characters, and be phrased in a more natural language style.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Destructive">
            <summary>
            Gets or sets whether the tool may perform destructive updates to its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may perform destructive updates to its environment.
            If <see langword="false"/>, the tool performs only additive updates.
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.Idempotent">
            <summary>
            Gets or sets whether calling the tool repeatedly with the same arguments 
            will have no additional effect on its environment.
            </summary>
            <remarks>
            <para>
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.OpenWorld">
            <summary>
            Gets or sets whether this tool may interact with an "open world" of external entities.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may interact with an unpredictable or dynamic set of entities (like web search).
            If <see langword="false"/>, the tool's domain of interaction is closed and well-defined (like memory access).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolAttribute.ReadOnly">
            <summary>
            Gets or sets whether this tool does not modify its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool only performs read operations without changing state.
            If <see langword="false"/>, the tool may make modifications to its environment.
            </para>
            <para>
            Read-only tools do not have side effects beyond computational resource usage.
            They don't create, update, or delete data in any system.
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolCreateOptions">
            <summary>
            Provides options for controlling the creation of an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            <para>
            These options allow for customizing the behavior and metadata of tools created with
            <see cref="M:McpServerTool.Create"/>. They provide control over naming, description,
            tool properties, and dependency injection integration.
            </para>
            <para>
            When creating tools programmatically rather than using attributes, these options
            provide the same level of configuration flexibility.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Services">
            <summary>
            Gets or sets optional services used in the construction of the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            These services will be used to determine which parameters should be satisifed from dependency injection. As such,
            what services are satisfied via this provider should match what's satisfied via the provider passed in at invocation time.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Name">
            <summary>
            Gets or sets the name to use for the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but an <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/> is applied to the method,
            the name from the attribute will be used. If that's not present, a name based on the method's name will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Description">
            <summary>
            Gets or set the description to use for the <see cref="T:ModelContextProtocol.Server.McpServerTool"/>.
            </summary>
            <remarks>
            If <see langword="null"/>, but a <see cref="T:System.ComponentModel.DescriptionAttribute"/> is applied to the method,
            the description from that attribute will be used.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Title">
            <summary>
            Gets or sets a human-readable title for the tool that can be displayed to users.
            </summary>
            <remarks>
            <para>
            The title provides a more descriptive, user-friendly name for the tool than the tool's
            programmatic name. It is intended for display purposes and to help users understand
            the tool's purpose at a glance.
            </para>
            <para>
            Unlike the tool name (which follows programmatic naming conventions), the title can
            include spaces, special characters, and be phrased in a more natural language style.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Destructive">
            <summary>
            Gets or sets whether the tool may perform destructive updates to its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may perform destructive updates to its environment.
            If <see langword="false"/>, the tool performs only additive updates.
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.Idempotent">
            <summary>
            Gets or sets whether calling the tool repeatedly with the same arguments 
            will have no additional effect on its environment.
            </summary>
            <remarks>
            <para>
            This property is most relevant when the tool modifies its environment (ReadOnly = false).
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.OpenWorld">
            <summary>
            Gets or sets whether this tool may interact with an "open world" of external entities.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool may interact with an unpredictable or dynamic set of entities (like web search).
            If <see langword="false"/>, the tool's domain of interaction is closed and well-defined (like memory access).
            </para>
            <para>
            The default is <see langword="true"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.ReadOnly">
            <summary>
            Gets or sets whether this tool does not modify its environment.
            </summary>
            <remarks>
            <para>
            If <see langword="true"/>, the tool only performs read operations without changing state.
            If <see langword="false"/>, the tool may make modifications to its environment.
            </para>
            <para>
            Read-only tools do not have side effects beyond computational resource usage.
            They don't create, update, or delete data in any system.
            </para>
            <para>
            The default is <see langword="false"/>.
            </para>
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.SerializerOptions">
            <summary>
            Gets or sets the JSON serializer options to use when marshalling data to/from JSON.
            </summary>
            <remarks>
            Defaults to <see cref="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions"/> if left unspecified.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.McpServerToolCreateOptions.SchemaCreateOptions">
            <summary>
            Gets or sets the JSON schema options when creating <see cref="T:Microsoft.Extensions.AI.AIFunction"/> from a method.
            </summary>
            <remarks>
            Defaults to <see cref="P:Microsoft.Extensions.AI.AIJsonSchemaCreateOptions.Default"/> if left unspecified.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Server.McpServerToolCreateOptions.Clone">
            <summary>
            Creates a shallow clone of the current <see cref="T:ModelContextProtocol.Server.McpServerToolCreateOptions"/> instance.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Server.McpServerToolTypeAttribute">
            <summary>
            Used to attribute a type containing methods that should be exposed as <see cref="T:ModelContextProtocol.Server.McpServerTool"/>s.
            </summary>
            <remarks>
            <para>
            This attribute is used to mark a class containing methods that should be automatically
            discovered and registered as <see cref="T:ModelContextProtocol.Server.McpServerTool"/>s. When combined with discovery methods like
            <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithToolsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)"/>, it enables automatic registration 
            of tools without explicitly listing each tool class. The attribute is not necessary when a reference
            to the type is provided directly to a method like <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)"/>.
            </para>
            <para>
            Within a class marked with this attribute, individual methods that should be exposed as
            tools must be marked with the <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Server.RequestContext`1">
            <summary>
            Provides a context container that provides access to the client request parameters and resources for the request.
            </summary>
            <typeparam name="TParams">Type of the request parameters specific to each MCP operation.</typeparam>
            <remarks>
            The <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> encapsulates all contextual information for handling an MCP request.
            This type is typically received as a parameter in handler delegates registered with <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/>,
            and may be injected as parameters into <see cref="T:ModelContextProtocol.Server.McpServerTool"/>s.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Server.RequestContext`1._server">
            <summary>The server with which this instance is associated.</summary>
        </member>
        <member name="M:ModelContextProtocol.Server.RequestContext`1.#ctor(ModelContextProtocol.Server.IMcpServer)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Server.RequestContext`1"/> class with the specified server.
            </summary>
            <param name="server">The server with which this instance is associated.</param>
        </member>
        <member name="P:ModelContextProtocol.Server.RequestContext`1.Server">
            <summary>Gets or sets the server with which this instance is associated.</summary>
        </member>
        <member name="P:ModelContextProtocol.Server.RequestContext`1.Services">
            <summary>Gets or sets the services associated with this request.</summary>
            <remarks>
            This may not be the same instance stored in <see cref="P:ModelContextProtocol.Server.IMcpServer.Services"/>
            if <see cref="P:ModelContextProtocol.Server.McpServerOptions.ScopeRequests"/> was true, in which case this
            might be a scoped <see cref="T:System.IServiceProvider"/> derived from the server's
            <see cref="P:ModelContextProtocol.Server.IMcpServer.Services"/>.
            </remarks>
        </member>
        <member name="P:ModelContextProtocol.Server.RequestContext`1.Params">
            <summary>Gets or sets the parameters associated with this request.</summary>
        </member>
        <member name="T:ModelContextProtocol.Shared.McpEndpoint">
            <summary>
            Base class for an MCP JSON-RPC endpoint. This covers both MCP clients and servers.
            It is not supported, nor necessary, to implement both client and server functionality in the same class.
            If an application needs to act as both a client and a server, it should use separate objects for each.
            This is especially true as a client represents a connection to one and only one server, and vice versa.
            Any multi-client or multi-server functionality should be implemented at a higher level of abstraction.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpEndpoint.DefaultAssemblyName">
            <summary>Cached naming information used for name/version when none is specified.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpEndpoint.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Shared.McpEndpoint"/> class.
            </summary>
            <param name="loggerFactory">The logger factory.</param>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpEndpoint.EndpointName">
            <summary>
            Gets the name of the endpoint for logging and debug purposes.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpEndpoint.MessageProcessingTask">
            <summary>
            Task that processes incoming messages from the transport.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpEndpoint.DisposeUnsynchronizedAsync">
            <summary>
            Cleans up the endpoint and releases resources.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ModelContextProtocol.Shared.McpSession">
            <summary>
            Class for managing an MCP JSON-RPC session. This covers both MCP clients and servers.
            </summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.McpSession._pendingRequests">
            <summary>Collection of requests sent on this session and waiting for responses.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.McpSession._handlingRequests">
            <summary>
            Collection of requests received on this session and currently being handled. The value provides a <see cref="T:System.Threading.CancellationTokenSource"/>
            that can be used to request cancellation of the in-flight handler.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.#ctor(System.Boolean,ModelContextProtocol.Protocol.Transport.ITransport,System.String,ModelContextProtocol.Shared.RequestHandlers,ModelContextProtocol.Shared.NotificationHandlers,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:ModelContextProtocol.Shared.McpSession"/> class.
            </summary>
            <param name="isServer">true if this is a server; false if it's a client.</param>
            <param name="transport">An MCP transport implementation.</param>
            <param name="endpointName">The name of the endpoint for logging and debug purposes.</param>
            <param name="requestHandlers">A collection of request handlers.</param>
            <param name="notificationHandlers">A collection of notification handlers.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="P:ModelContextProtocol.Shared.McpSession.EndpointName">
            <summary>
            Gets and sets the name of the endpoint for logging and debug purposes.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.ProcessMessagesAsync(System.Threading.CancellationToken)">
            <summary>
            Starts processing messages from the transport. This method will block until the transport is disconnected.
            This is generally started in a background task or thread from the initialization logic of the derived class.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.McpSession.SendRequestAsync(ModelContextProtocol.Protocol.Messages.JsonRpcRequest,System.Threading.CancellationToken)">
            <summary>
            Sends a JSON-RPC request to the server.
            It is strongly recommended use the capability-specific methods instead of this one.
            Use this method for custom requests or those not yet covered explicitly by the endpoint implementation.
            </summary>
            <param name="request">The JSON-RPC request to send.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests. The default is <see cref="P:System.Threading.CancellationToken.None"/>.</param>
            <returns>A task containing the server's response.</returns>
        </member>
        <member name="T:ModelContextProtocol.Shared.McpSession.__LogRequestSentAwaitingResponseStruct">
            <summary> This API supports the logging infrastructure and is not intended to be used directly from your code. It is subject to change in the future. </summary>
        </member>
        <member name="T:ModelContextProtocol.Shared.NotificationHandlers">
            <summary>Provides thread-safe storage for notification handlers.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers._handlers">
            <summary>A dictionary of linked lists of registrations, indexed by the notification method.</summary>
        </member>
        <member name="P:ModelContextProtocol.Shared.NotificationHandlers.SyncObj">
            <summary>Gets the object to be used for all synchronization.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.RegisterRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask}}})">
            <summary>
            Registers a collection of notification handlers at once.
            </summary>
            <param name="handlers">
            A collection of notification method names paired with their corresponding handler functions.
            Each key in the collection is a notification method name, and each value is a handler function
            that will be invoked when a notification with that method name is received.
            </param>
            <remarks>
            <para>
            This method is typically used during client or server initialization to register
            all notification handlers provided in capabilities.
            </para>
            <para>
            Registrations completed with this method are permanent and non-removable.
            This differs from handlers registered with <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Register(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Boolean)"/> which can be temporary.
            </para>
            <para>
            When multiple handlers are registered for the same method, all handlers will be invoked
            in reverse order of registration (newest first) when a notification is received.
            </para>
            <para>
            The registered handlers will be invoked by <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.InvokeHandlers(System.String,ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken)"/> when a notification
            with the corresponding method name is received.
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.Register(System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>
            Adds a notification handler as part of configuring the endpoint.
            </summary>
            <param name="method">The notification method for which the handler is being registered.</param>
            <param name="handler">The handler being registered.</param>
            <param name="temporary">
            <see langword="true"/> if the registration can be removed later; <see langword="false"/> if it cannot.
            If <see langword="false"/>, the registration will be permanent: calling <see cref="M:System.IAsyncDisposable.DisposeAsync"/>
            on the returned instance will not unregister the handler.
            </param>
            <returns>
            An <see cref="T:System.IAsyncDisposable"/> that when disposed will unregister the handler if <paramref name="temporary"/> is <see langword="true"/>.
            </returns>
            <remarks>
            Multiple handlers can be registered for the same method. When a notification for that method is received,
            all registered handlers will be invoked in reverse order of registration (newest first).
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.InvokeHandlers(System.String,ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken)">
            <summary>
            Invokes all registered handlers for the specified notification method.
            </summary>
            <param name="method">The notification method name to invoke handlers for.</param>
            <param name="notification">The notification object to pass to each handler.</param>
            <param name="cancellationToken">A token that can be used to cancel the operation.</param>
            <remarks>
            Handlers are invoked in reverse order of registration (newest first).
            If any handler throws an exception, all handlers will still be invoked, and an <see cref="T:System.AggregateException"/> 
            containing all exceptions will be thrown after all handlers have been invoked.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Shared.NotificationHandlers.Registration">
            <summary>Provides storage for a handler registration.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.#ctor(ModelContextProtocol.Shared.NotificationHandlers,System.String,System.Func{ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask},System.Boolean)">
            <summary>Provides storage for a handler registration.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration.s_invokingAncestor">
            <summary>Used to prevent deadlocks during disposal.</summary>
            <remarks>
            The task returned from <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> does not complete until all invocations of the handler
            have completed and no more will be performed, so that the consumer can then trust that any resources accessed
            by that handler are no longer in use and may be cleaned up. If <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> were to be invoked
            and its task awaited from within the invocation of the handler, however, that would result in deadlock, since
            the task wouldn't complete until the invocation completed, and the invocation wouldn't complete until the task
            completed. To circument that, we track via an <see cref="T:System.Threading.AsyncLocal`1"/> in-flight invocations. If
            <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> detects it's being invoked from within an invocation, it will avoid waiting. For
            simplicity, we don't require that it's the same handler.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._handlers">
            <summary>The parent <see cref="T:ModelContextProtocol.Shared.NotificationHandlers"/> to which this registration belongs.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._method">
            <summary>The method with which this registration is associated.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._handler">
            <summary>The handler this registration represents.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._temporary">
            <summary>true if this instance is temporary; false if it's permanent</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._disposeTcs">
            <summary>Provides a task that <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> can await to know when all in-flight invocations have completed.</summary>
            <remarks>
            This will only be initialized if <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> sees in-flight invocations, in which case it'll initialize
            this <see cref="T:System.Threading.Tasks.TaskCompletionSource`1"/> and then await its task. The task will be completed when the last
            in-flight notification completes.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._refCount">
            <summary>The number of remaining references to this registration.</summary>
            <remarks>
            The ref count starts life at 1 to represent the whole registration; that ref count will be subtracted when
            the instance is disposed. Every invocation then temporarily increases the ref count before invocation and
            decrements it after. When <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> is called, it decrements the ref count. In the common
            case, that'll bring the count down to 0, in which case the instance will never be subsequently invoked.
            If, however, after that decrement the count is still positive, then there are in-flight invocations; the last
            one of those to complete will end up decrementing the ref count to 0.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration._disposedCalled">
            <summary>Tracks whether <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> has ever been invoked.</summary>
            <remarks>
            It's rare but possible <see cref="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync"/> is called multiple times. Only the first
            should decrement the initial ref count, but they all must wait until all invocations have quiesced.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration.Next">
            <summary>The next registration in the linked list.</summary>
        </member>
        <member name="F:ModelContextProtocol.Shared.NotificationHandlers.Registration.Prev">
            <summary>
            The previous registration in the linked list of handlers for a specific notification method.
            Used to maintain the bidirectional linked list when handlers are added or removed.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.DisposeAsync">
            <summary>Removes the registration.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.InvokeAsync(ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken)">
            <summary>Invoke the handler associated with the registration.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.NotificationHandlers.Registration.InvokeTemporaryAsync(ModelContextProtocol.Protocol.Messages.JsonRpcNotification,System.Threading.CancellationToken)">
            <summary>Invoke the handler associated with the temporary registration.</summary>
        </member>
        <member name="M:ModelContextProtocol.Shared.RequestHandlers.Set``2(System.String,System.Func{``0,ModelContextProtocol.Protocol.Transport.ITransport,System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{``1}},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``0},System.Text.Json.Serialization.Metadata.JsonTypeInfo{``1})">
            <summary>
            Registers a handler for incoming requests of a specific method in the MCP protocol.
            </summary>
            <typeparam name="TRequest">Type of request payload that will be deserialized from incoming JSON</typeparam>
            <typeparam name="TResponse">Type of response payload that will be serialized to JSON (not full RPC response)</typeparam>
            <param name="method">Method identifier to register for (e.g., "tools/list", "logging/setLevel")</param>
            <param name="handler">Handler function to be called when a request with the specified method identifier is received</param>
            <param name="requestTypeInfo">The JSON contract governing request parameter deserialization</param>
            <param name="responseTypeInfo">The JSON contract governing response serialization</param>
            <remarks>
            <para>
            This method is used internally by the MCP infrastructure to register handlers for various protocol methods.
            When an incoming request matches the specified method, the registered handler will be invoked with the
            deserialized request parameters.
            </para>
            <para>
            The handler function receives the deserialized request object and a cancellation token, and should return
            a response object that will be serialized back to the client.
            </para>
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.TokenProgress">
            <summary>
            Provides an <see cref="T:System.IProgress`1"/> tied to a specific progress token and that will issue
            progress notifications on the supplied endpoint.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.TokenProgress.#ctor(ModelContextProtocol.IMcpEndpoint,ModelContextProtocol.Protocol.Messages.ProgressToken)">
            <summary>
            Provides an <see cref="T:System.IProgress`1"/> tied to a specific progress token and that will issue
            progress notifications on the supplied endpoint.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.TokenProgress.Report(ModelContextProtocol.ProgressNotificationValue)">
            <inheritdoc />
        </member>
        <member name="T:ModelContextProtocol.UriTemplate">
            <summary>Provides basic support for parsing and formatting URI templates.</summary>
            <remarks>
            This implementation should correctly handle valid URI templates, but it has undefined output for invalid templates,
            e.g. it may treat portions of invalid templates as literals rather than throwing.
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.UriTemplate.UriTemplateExpressionPattern">
            <summary>Regex pattern for finding URI template expressions and parsing out the operator and varname.</summary>
        </member>
        <member name="M:ModelContextProtocol.UriTemplate.UriTemplateExpression">
            <remarks>
            Pattern:<br/>
            <code>{                                                       # opening brace\r\n    (?&lt;operator&gt;[+#./;?&amp;]?)                             # optional operator\r\n    (?&lt;varname&gt;\r\n        (?:[A-Za-z0-9_]|%[0-9A-Fa-f]{2})                # varchar: letter, digit, underscore, or pct-encoded\r\n        (?:\\.?(?:[A-Za-z0-9_]|%[0-9A-Fa-f]{2}))*        # optionally dot-separated subsequent varchars\r\n    )\r\n    (?: :[1-9][0-9]{0,3} )?                             # optional prefix modifier (1–4 digits)\r\n    \\*?                                                 # optional explode\r\n    (?:,                                                # comma separator, followed by the same as above\r\n        (?&lt;varname&gt;\r\n            (?:[A-Za-z0-9_]|%[0-9A-Fa-f]{2})\r\n            (?:\\.?(?:[A-Za-z0-9_]|%[0-9A-Fa-f]{2}))*\r\n        )\r\n        (?: :[1-9][0-9]{0,3} )?\r\n        \\*?\r\n    )*                                                  # zero or more additional vars\r\n}                                                       # closing brace</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnorePatternWhitespace</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '{'.<br/>
            ○ "operator" capture group.<br/>
                ○ Match a character in the set [#&amp;+./;?] atomically, optionally.<br/>
            ○ "varname" capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match a character in the set [0-9A-Z_a-z].<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match an empty string.<br/>
                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                ○ Loop greedily any number of times.<br/>
                    ○ Match '.' atomically, optionally.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [0-9A-Z_a-z].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match an empty string.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match ':'.<br/>
                ○ Match a character in the set [1-9].<br/>
                ○ Match a character in the set [0-9] greedily at most 3 times.<br/>
            ○ Match '*' greedily, optionally.<br/>
            ○ Loop greedily any number of times.<br/>
                ○ Match ','.<br/>
                ○ "varname" capture group.<br/>
                    ○ Match with 2 alternative expressions.<br/>
                        ○ Match a character in the set [0-9A-Z_a-z].<br/>
                        ○ Match a sequence of expressions.<br/>
                            ○ Match an empty string.<br/>
                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match '.' atomically, optionally.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a character in the set [0-9A-Z_a-z].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match an empty string.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                ○ Optional (greedy).<br/>
                    ○ Match ':'.<br/>
                    ○ Match a character in the set [1-9].<br/>
                    ○ Match a character in the set [0-9] greedily at most 3 times.<br/>
                ○ Match '*' atomically, optionally.<br/>
            ○ Match '}'.<br/>
            </code>
            </remarks>
        </member>
        <member name="F:ModelContextProtocol.UriTemplate.s_appendWhenAllowReserved">
            <summary>SearchValues for characters that needn't be escaped when allowing reserved characters.</summary>
        </member>
        <member name="M:ModelContextProtocol.UriTemplate.CreateParser(System.String)">
            <summary>Create a <see cref="T:System.Text.RegularExpressions.Regex"/> for matching a URI against a URI template.</summary>
            <param name="uriTemplate">The template against which to match.</param>
            <returns>A regex pattern that can be used to match the specified URI template.</returns>
        </member>
        <member name="M:ModelContextProtocol.UriTemplate.FormatUri(System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Expand a URI template using the given variable values.
            </summary>
        </member>
        <member name="T:ModelContextProtocol.Utils.Json.CustomizableJsonStringEnumConverter`1">
            <summary>
            A JSON converter for enums that allows customizing the serialized string value of enum members
            using the <see cref="T:System.Text.Json.Serialization.JsonStringEnumMemberNameAttribute"/>.
            </summary>
            <typeparam name="TEnum">The enum type to convert.</typeparam>
            <remarks>
            This is a temporary workaround for lack of System.Text.Json's JsonStringEnumConverter&lt;T&gt;
            9.x support for custom enum member naming. It will be replaced by the built-in functionality
            once .NET 9 is fully adopted.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter">
            <summary>
            Provides a <see cref="T:System.Text.Json.Serialization.JsonConverter"/> for <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcMessage"/> messages,
            handling polymorphic deserialization of different message types.
            </summary>
            <remarks>
            <para>
            This converter is responsible for correctly deserializing JSON-RPC messages into their appropriate
            concrete types based on the message structure. It analyzes the JSON payload and determines if it
            represents a request, notification, successful response, or error response.
            </para>
            <para>
            The type determination rules follow the JSON-RPC 2.0 specification:
            <list type="bullet">
            <item><description>Messages with "method" and "id" properties are deserialized as <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcRequest"/>.</description></item>
            <item><description>Messages with "method" but no "id" property are deserialized as <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcNotification"/>.</description></item>
            <item><description>Messages with "id" and "result" properties are deserialized as <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcResponse"/>.</description></item>
            <item><description>Messages with "id" and "error" properties are deserialized as <see cref="T:ModelContextProtocol.Protocol.Messages.JsonRpcError"/>.</description></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.JsonRpcMessageConverter.Write(System.Text.Json.Utf8JsonWriter,ModelContextProtocol.Protocol.Messages.JsonRpcMessage,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Utils.Json.McpJsonUtilities">
            <summary>Provides a collection of utility methods for working with JSON data in the context of MCP.</summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.DefaultOptions">
            <summary>
            Gets the <see cref="T:System.Text.Json.JsonSerializerOptions"/> singleton used as the default in JSON serialization operations.
            </summary>
            <remarks>
            <para>
            For Native AOT or applications disabling <see cref="P:System.Text.Json.JsonSerializer.IsReflectionEnabledByDefault"/>, this instance 
            includes source generated contracts for all common exchange types contained in the ModelContextProtocol library.
            </para>
            <para>
            It additionally turns on the following settings:
            <list type="number">
            <item>Enables string-based enum serialization as implemented by <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter"/>.</item>
            <item>Enables <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull"/> as the default ignore condition for properties.</item>
            <item>Enables <see cref="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString"/> as the default number handling for number types.</item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.CreateDefaultOptions">
            <summary>
            Creates default options to use for MCP-related serialization.
            </summary>
            <returns>The configured options.</returns>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Boolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableBoolean">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Byte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableByte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Char">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableChar">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Decimal">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableDecimal">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Double">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableDouble">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Single">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableSingle">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CancelledNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcError">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcErrorDetail">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcMessageArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcRequest">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonRpcResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ProgressNotification">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ProgressToken">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableProgressToken">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RequestId">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Annotations">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Argument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CallToolRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CallToolResponse">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ClientCapabilities">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CompleteRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CompleteResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Completion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CompletionsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Content">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ContextInclusion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableContextInclusion">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CreateMessageRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.CreateMessageResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.EmptyResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetPromptRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetPromptResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Implementation">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.InitializeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.InitializeResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourcesRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourcesResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplatesRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplatesResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListRootsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListRootsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListToolsRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListToolsResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingLevel">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.LoggingMessageNotificationParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ModelHint">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ModelPreferences">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PingResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Prompt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptArgument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.PromptsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ReadResourceRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ReadResourceResult">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Reference">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RequestParamsMetadata">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Resource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceContents">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourcesCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceTemplate">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ResourceUpdatedNotificationParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Role">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RoleArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Root">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.RootsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SamplingCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SamplingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ServerCapabilities">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SetLevelRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SubscribeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Tool">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ToolAnnotations">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ToolsCapability">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UnsubscribeRequestParams">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyDictionaryStringJsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyDictionaryStringObject">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListModelHint">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListRoot">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListSamplingMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IReadOnlyListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListContent">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPrompt">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptArgument">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListPromptMessage">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResource">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceContents">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListResourceTemplate">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.ListTool">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DateOnly">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableDateOnly">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableDateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.DateTimeOffset">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableDateTimeOffset">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Guid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableGuid">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Half">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableHalf">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int128">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt128">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableJsonElement">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.JsonNode">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.TimeOnly">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableTimeOnly">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.TimeSpan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableTimeSpan">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UInt128">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableUInt128">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Uri">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Version">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.IntPtr">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableIntPtr">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UIntPtr">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableUIntPtr">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Object">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.SByte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableSByte">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Int16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableInt16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.StringArray">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableUInt32">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableUInt64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.UInt16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.NullableUInt16">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:ModelContextProtocol.Utils.Json.McpJsonUtilities.JsonContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:ModelContextProtocol.Utils.ProcessHelper">
            <summary>
            Helper class for working with processes.
            </summary>
        </member>
        <member name="M:ModelContextProtocol.Utils.ProcessHelper.KillTree(System.Diagnostics.Process)">
            <summary>
            Kills a process and all of its child processes (entire process tree).
            </summary>
            <param name="process">The process to terminate along with its child processes.</param>
            <remarks>
            This method uses a default timeout of 30 seconds when waiting for processes to exit.
            On Windows, this uses the "taskkill" command with the /T flag.
            On non-Windows platforms, it recursively identifies and terminates child processes.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.ProcessHelper.KillTree(System.Diagnostics.Process,System.TimeSpan)">
            <summary>
            Kills a process and all of its child processes (entire process tree) with a specified timeout.
            </summary>
            <param name="process">The process to terminate along with its child processes.</param>
            <param name="timeout">The maximum time to wait for the processes to exit.</param>
            <remarks>
            On Windows, this uses the "taskkill" command with the /T flag to terminate the process tree.
            On non-Windows platforms, it recursively identifies and terminates child processes.
            The method waits for the specified timeout for processes to exit before continuing.
            This is particularly useful for applications that spawn child processes (like Node.js)
            that wouldn't be terminated automatically when the parent process exits.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.SynchronizationExtensions.LockAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <summary>
            Asynchronously acquires a lock on the semaphore and returns a disposable object that releases the lock when disposed.
            </summary>
            <param name="semaphore">The semaphore to acquire a lock on.</param>
            <param name="cancellationToken">A cancellation token to observe while waiting for the semaphore.</param>
            <returns>A disposable <see cref="T:ModelContextProtocol.Utils.SynchronizationExtensions.Releaser"/> that releases the semaphore when disposed.</returns>
            <remarks>
            This extension method provides a convenient pattern for using a semaphore in asynchronous code,
            similar to how the `lock` statement is used in synchronous code.
            </remarks>
            <exception cref="T:System.OperationCanceledException">The <paramref name="cancellationToken"/> was canceled.</exception>
        </member>
        <member name="T:ModelContextProtocol.Utils.SynchronizationExtensions.Releaser">
            <summary>
            A disposable struct that releases a semaphore when disposed.
            </summary>
            <remarks>
            This struct is used with the <see cref="M:ModelContextProtocol.Utils.SynchronizationExtensions.LockAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)"/> extension method to provide
            a using-pattern for semaphore locking, similar to lock statements.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.SynchronizationExtensions.Releaser.#ctor(System.Threading.SemaphoreSlim)">
            <summary>
            A disposable struct that releases a semaphore when disposed.
            </summary>
            <remarks>
            This struct is used with the <see cref="M:ModelContextProtocol.Utils.SynchronizationExtensions.LockAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)"/> extension method to provide
            a using-pattern for semaphore locking, similar to lock statements.
            </remarks>
        </member>
        <member name="M:ModelContextProtocol.Utils.SynchronizationExtensions.Releaser.Dispose">
            <summary>
            Releases the semaphore.
            </summary>
            <remarks>
            This method is called automatically when the <see cref="T:ModelContextProtocol.Utils.SynchronizationExtensions.Releaser"/> goes out of scope
            in a using statement or expression.
            </remarks>
        </member>
        <member name="T:ModelContextProtocol.Utils.Throw">
            <summary>Provides helper methods for throwing exceptions.</summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder">
            <summary>
            Default implementation of <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/> that enables fluent configuration
            of the Model Context Protocol (MCP) server. This builder is returned by the 
            <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions.AddMcpServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ModelContextProtocol.Server.McpServerOptions})"/> extension method and 
            provides access to the service collection for registering additional MCP components.
            </summary>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder.Services">
            <inheritdoc/>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder"/> class.
            </summary>
            <param name="services">The service collection to which MCP server services will be added. This collection
            is exposed through the <see cref="P:Microsoft.Extensions.DependencyInjection.DefaultMcpServerBuilder.Services"/> property to allow additional configuration.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> is null.</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder">
            <summary>
            Provides a builder for configuring <see cref="T:ModelContextProtocol.Server.IMcpServer"/> instances.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/> interface provides a fluent API for configuring Model Context Protocol (MCP) servers
            when using dependency injection. It exposes methods for registering tools, prompts, custom request handlers,
            and server transports, allowing for comprehensive server configuration through a chain of method calls.
            </para>
            <para>
            The builder is obtained from the <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions.AddMcpServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ModelContextProtocol.Server.McpServerOptions})"/> extension 
            method and provides access to the underlying service collection via the <see cref="P:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder.Services"/> property.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder.Services">
            <summary>
            Gets the associated service collection.
            </summary>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions">
            <summary>
            Provides methods for configuring MCP servers via dependency injection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <typeparam name="TToolType">The tool type.</typeparam>
            <param name="builder">The builder instance.</param>
            <param name="serializerOptions">The serializer options governing tool parameter marshalling.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <typeparamref name="TToolType"/>
            type, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the tool.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerTool})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="tools">The <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to add to the server.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="tools"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type},System.Text.Json.JsonSerializerOptions)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerTool"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="toolTypes">Types with <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>-attributed methods to add as tools to the server.</param>
            <param name="serializerOptions">The serializer options governing tool parameter marshalling.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="toolTypes"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <paramref name="toolTypes"/>
            types, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerTool"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the tool.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithToolsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Adds types marked with the <see cref="T:ModelContextProtocol.Server.McpServerToolTypeAttribute"/> attribute from the given assembly as tools to the server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="serializerOptions">The serializer options governing tool parameter marshalling.</param>
            <param name="toolAssembly">The assembly to load the types from. If <see langword="null"/>, the calling assembly will be used.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method scans the specified assembly (or the calling assembly if none is provided) for classes
            marked with the <see cref="T:ModelContextProtocol.Server.McpServerToolTypeAttribute"/>. It then discovers all methods within those
            classes that are marked with the <see cref="T:ModelContextProtocol.Server.McpServerToolAttribute"/> and registers them as <see cref="T:ModelContextProtocol.Server.McpServerTool"/>s 
            in the <paramref name="builder"/>'s <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </para>
            <para>
            The method automatically handles both static and instance methods. For instance methods, a new instance
            of the containing class will be constructed for each invocation of the tool.
            </para>
            <para>
            Tools registered through this method can be discovered by clients using the <c>list_tools</c> request
            and invoked using the <c>call_tool</c> request.
            </para>
            <para>
            Note that this method performs reflection at runtime and may not work in Native AOT scenarios. For
            Native AOT compatibility, consider using the generic <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithTools``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)"/> method instead.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <typeparam name="TPromptType">The prompt type.</typeparam>
            <param name="builder">The builder instance.</param>
            <param name="serializerOptions">The serializer options governing prompt parameter marshalling.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <typeparamref name="TPromptType"/>
            type, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the prompt.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerPrompt})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="prompts">The <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to add to the server.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="prompts"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type},System.Text.Json.JsonSerializerOptions)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="promptTypes">Types with marked methods to add as prompts to the server.</param>
            <param name="serializerOptions">The serializer options governing prompt parameter marshalling.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="promptTypes"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <paramref name="promptTypes"/>
            types, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the prompt.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPromptsFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly,System.Text.Json.JsonSerializerOptions)">
            <summary>
            Adds types marked with the <see cref="T:ModelContextProtocol.Server.McpServerPromptTypeAttribute"/> attribute from the given assembly as prompts to the server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="serializerOptions">The serializer options governing prompt parameter marshalling.</param>
            <param name="promptAssembly">The assembly to load the types from. If <see langword="null"/>, the calling assembly will be used.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method scans the specified assembly (or the calling assembly if none is provided) for classes
            marked with the <see cref="T:ModelContextProtocol.Server.McpServerPromptTypeAttribute"/>. It then discovers all methods within those
            classes that are marked with the <see cref="T:ModelContextProtocol.Server.McpServerPromptAttribute"/> and registers them as <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/>s 
            in the <paramref name="builder"/>'s <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </para>
            <para>
            The method automatically handles both static and instance methods. For instance methods, a new instance
            of the containing class will be constructed for each invocation of the prompt.
            </para>
            <para>
            Prompts registered through this method can be discovered by clients using the <c>list_prompts</c> request
            and invoked using the <c>call_prompt</c> request.
            </para>
            <para>
            Note that this method performs reflection at runtime and may not work in Native AOT scenarios. For
            Native AOT compatibility, consider using the generic <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithPrompts``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Text.Json.JsonSerializerOptions)"/> method instead.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResources``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <typeparam name="TResourceType">The resource type.</typeparam>
            <param name="builder">The builder instance.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <typeparamref name="TResourceType"/>
            type, where the members are attributed as <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerResource"/>
            instance for each. For instance members, an instance will be constructed for each invocation of the resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResources(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerResource})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="resourcetemplates">The <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances to add to the server.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourcetemplates"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResources(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>Adds <see cref="T:ModelContextProtocol.Server.McpServerResource"/> instances to the service collection backing <paramref name="builder"/>.</summary>
            <param name="builder">The builder instance.</param>
            <param name="resourceTemplateTypes">Types with marked methods to add as resources to the server.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="resourceTemplateTypes"/> is <see langword="null"/>.</exception>
            <remarks>
            This method discovers all instance and static methods (public and non-public) on the specified <paramref name="resourceTemplateTypes"/>
            types, where the methods are attributed as <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/>, and adds an <see cref="T:ModelContextProtocol.Server.McpServerResource"/>
            instance for each. For instance methods, an instance will be constructed for each invocation of the resource.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResourcesFromAssembly(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Reflection.Assembly)">
            <summary>
            Adds types marked with the <see cref="T:ModelContextProtocol.Server.McpServerResourceTypeAttribute"/> attribute from the given assembly as resources to the server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="resourceAssembly">The assembly to load the types from. If <see langword="null"/>, the calling assembly will be used.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method scans the specified assembly (or the calling assembly if none is provided) for classes
            marked with the <see cref="T:ModelContextProtocol.Server.McpServerResourceTypeAttribute"/>. It then discovers all members within those
            classes that are marked with the <see cref="T:ModelContextProtocol.Server.McpServerResourceAttribute"/> and registers them as <see cref="T:ModelContextProtocol.Server.McpServerResource"/>s 
            in the <paramref name="builder"/>'s <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.
            </para>
            <para>
            The method automatically handles both static and instance members. For instance members, a new instance
            of the containing class will be constructed for each invocation of the resource.
            </para>
            <para>
            Resource templates registered through this method can be discovered by clients using the <c>list_resourcetemplates</c> request
            and invoked using the <c>read_resource</c> request.
            </para>
            <para>
            Note that this method performs reflection at runtime and may not work in Native AOT scenarios. For
            Native AOT compatibility, consider using the generic <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithResources``1(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)"/> method instead.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListResourceTemplatesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListResourceTemplatesRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListResourceTemplatesResult}})">
            <summary>
            Configures a handler for listing resource templates available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes resource template list requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This handler is responsible for providing clients with information about available resource templates
            that can be used to construct resource URIs.
            </para>
            <para>
            Resource templates describe the structure of resource URIs that the server can handle. They include
            URI templates (according to RFC 6570) that clients can use to construct valid resource URIs.
            </para>
            <para>
            This handler is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithReadResourceHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ReadResourceResult}})"/> to provide a complete
            resource system where templates define the URI patterns and the read handler provides the actual content.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListToolsResult}})">
            <summary>
            Configures a handler for listing tools available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler that processes list tools requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This handler is called when a client requests a list of available tools. It should return all tools
            that can be invoked through the server, including their names, descriptions, and parameter specifications.
            The handler can optionally support pagination via the cursor mechanism for large or dynamically-generated
            tool collections.
            </para>
            <para>
            When tools are also defined using <see cref="T:ModelContextProtocol.Server.McpServerTool"/> collection, both sets of tools
            will be combined in the response to clients. This allows for a mix of programmatically defined
            tools and dynamically generated tools.
            </para>
            <para>
            This method is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCallToolHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.CallToolResponse}})"/> to provide a complete tools implementation,
            where <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListToolsResult}})"/> advertises available tools and <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCallToolHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.CallToolResponse}})"/> 
            executes them when invoked by clients.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCallToolHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CallToolRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.CallToolResponse}})">
            <summary>
            Configures a handler for calling tools available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes tool calls.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            The call tool handler is responsible for executing custom tools and returning their results to clients.
            This method is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListToolsResult}})"/> to provide a complete tools implementation,
            where <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListToolsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListToolsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListToolsResult}})"/> advertises available tools and this handler executes them.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListPromptsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListPromptsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListPromptsResult}})">
            <summary>
            Configures a handler for listing prompts available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler that processes list prompts requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This handler is called when a client requests a list of available prompts. It should return all prompts
            that can be invoked through the server, including their names, descriptions, and parameter specifications.
            The handler can optionally support pagination via the cursor mechanism for large or dynamically-generated
            prompt collections.
            </para>
            <para>
            When prompts are also defined using <see cref="T:ModelContextProtocol.Server.McpServerPrompt"/> collection, both sets of prompts
            will be combined in the response to clients. This allows for a mix of programmatically defined
            prompts and dynamically generated prompts.
            </para>
            <para>
            This method is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithGetPromptHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.GetPromptResult}})"/> to provide a complete prompts implementation,
            where <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListPromptsHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListPromptsRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListPromptsResult}})"/> advertises available prompts and <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithGetPromptHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.GetPromptResult}})"/> 
            produces them when invoked by clients.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithGetPromptHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.GetPromptRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.GetPromptResult}})">
            <summary>
            Configures a handler for getting a prompt available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes prompt requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListResourcesRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListResourcesResult}})">
            <summary>
            Configures a handler for listing resources available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes resource list requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This handler is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithReadResourceHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ReadResourceResult}})"/> to provide a complete resources implementation,
            where this handler advertises available resources and the read handler provides their content when requested.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithReadResourceHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ReadResourceRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ReadResourceResult}})">
            <summary>
            Configures a handler for reading a resource available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes resource read requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            This handler is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithListResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.ListResourcesRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.ListResourcesResult}})"/> to provide a complete resources implementation,
            where the list handler advertises available resources and the read handler provides their content when requested.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithCompleteHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.CompleteRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.CompleteResult}})">
            <summary>
            Configures a handler for auto-completion suggestions for prompt arguments or resource references available from the Model Context Protocol server.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes completion requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            The completion handler is invoked when clients request suggestions for argument values. 
            This enables auto-complete functionality for both prompt arguments and resource references.
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithSubscribeToResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.SubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.EmptyResult}})">
            <summary>
            Configures a handler for resource subscription requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes resource subscription requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            The subscribe handler is responsible for registering client interest in specific resources. When a resource
            changes, the server can notify all subscribed clients about the change.
            </para>
            <para>
            This handler is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithUnsubscribeFromResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.EmptyResult}})"/> to provide a complete
            subscription management system. Resource subscriptions allow clients to maintain up-to-date information without
            needing to poll resources constantly.
            </para>
            <para>
            After registering a subscription, it's the server's responsibility to track which client is subscribed to which
            resources and to send appropriate notifications through the connection when resources change.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithUnsubscribeFromResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.UnsubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.EmptyResult}})">
            <summary>
            Configures a handler for resource unsubscription requests.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="handler">The handler function that processes resource unsubscription requests.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            The unsubscribe handler is responsible for removing client interest in specific resources. When a client
            no longer needs to receive notifications about resource changes, it can send an unsubscribe request.
            </para>
            <para>
            This handler is typically paired with <see cref="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithSubscribeToResourcesHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.SubscribeRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.EmptyResult}})"/> to provide a complete
            subscription management system. The unsubscribe operation is idempotent, meaning it can be called multiple
            times for the same resource without causing errors, even if there is no active subscription.
            </para>
            <para>
            After removing a subscription, the server should stop sending notifications to the client about changes
            to the specified resource.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithSetLoggingLevelHandler(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.Func{ModelContextProtocol.Server.RequestContext{ModelContextProtocol.Protocol.Types.SetLevelRequestParams},System.Threading.CancellationToken,System.Threading.Tasks.ValueTask{ModelContextProtocol.Protocol.Types.EmptyResult}})">
            <summary>
            Configures a handler for processing logging level change requests from clients.
            </summary>
            <param name="builder">The server builder instance.</param>
            <param name="handler">The handler that processes requests to change the logging level.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            When a client sends a <c>logging/setLevel</c> request, this handler will be invoked to process
            the requested level change. The server typically adjusts its internal logging level threshold
            and may begin sending log messages at or above the specified level to the client.
            </para>
            <para>
            Regardless of whether a handler is provided, an <see cref="T:ModelContextProtocol.Server.IMcpServer"/> should itself handle
            such notifications by updating its <see cref="P:ModelContextProtocol.Server.IMcpServer.LoggingLevel"/> property to return the
            most recently set level.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithStdioServerTransport(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder)">
            <summary>
            Adds a server transport that uses standard input (stdin) and standard output (stdout) for communication.
            </summary>
            <param name="builder">The builder instance.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <remarks>
            <para>
            This method configures the server to communicate using the standard input and output streams,
            which is commonly used when the Model Context Protocol server is launched locally by a client process.
            </para>
            <para>
            When using this transport, the server runs as a single-session service that exits when the
            stdin stream is closed. This makes it suitable for scenarios where the server should terminate
            when the parent process disconnects.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerBuilderExtensions.WithStreamServerTransport(Microsoft.Extensions.DependencyInjection.IMcpServerBuilder,System.IO.Stream,System.IO.Stream)">
            <summary>
            Adds a server transport that uses the specified input and output streams for communication.
            </summary>
            <param name="builder">The builder instance.</param>
            <param name="inputStream">The input <see cref="T:System.IO.Stream"/> to use as standard input.</param>
            <param name="outputStream">The output <see cref="T:System.IO.Stream"/> to use as standard output.</param>
            <returns>The builder provided in <paramref name="builder"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="builder"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputStream"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="outputStream"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup">
            <summary>
            Configures the McpServerOptions using addition services from DI.
            </summary>
            <param name="serverHandlers">The server handlers configuration options.</param>
            <param name="serverTools">Tools individually registered.</param>
            <param name="serverPrompts">Prompts individually registered.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup.#ctor(Microsoft.Extensions.Options.IOptions{ModelContextProtocol.Server.McpServerHandlers},System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerTool},System.Collections.Generic.IEnumerable{ModelContextProtocol.Server.McpServerPrompt})">
            <summary>
            Configures the McpServerOptions using addition services from DI.
            </summary>
            <param name="serverHandlers">The server handlers configuration options.</param>
            <param name="serverTools">Tools individually registered.</param>
            <param name="serverPrompts">Prompts individually registered.</param>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerOptionsSetup.Configure(ModelContextProtocol.Server.McpServerOptions)">
            <summary>
            Configures the given McpServerOptions instance by setting server information
            and applying custom server handlers and tools.
            </summary>
            <param name="options">The options instance to be configured.</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions">
            <summary>
            Provides extension methods for configuring MCP servers with dependency injection.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.McpServerServiceCollectionExtensions.AddMcpServer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{ModelContextProtocol.Server.McpServerOptions})">
            <summary>
            Adds the Model Context Protocol (MCP) server to the service collection with default options.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to add the server to.</param>
            <param name="configureOptions">Optional callback to configure the <see cref="T:ModelContextProtocol.Server.McpServerOptions"/>.</param>
            <returns>An <see cref="T:Microsoft.Extensions.DependencyInjection.IMcpServerBuilder"/> that can be used to further configure the MCP server.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriTemplateExpression_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UriTemplateExpression method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UriTemplateExpression_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
    </members>
</doc>
